{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useThemeProps } from '@mui/material/styles';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  const {\n      desktopModeMediaQuery = '@media (pointer: fine)'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref\n    }, other));\n  }\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value={[null, null]}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific date.\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n} : void 0;\nexport { DateRangePicker };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useMediaQuery","useThemeProps","DesktopDateRangePicker","MobileDateRangePicker","jsx","_jsx","DateRangePicker","forwardRef","inProps","ref","props","name","desktopModeMediaQuery","other","isDesktop","defaultMatches","process","env","NODE_ENV","propTypes","autoFocus","bool","calendars","oneOf","className","string","closeOnSelect","components","object","componentsProps","currentMonthCalendarPosition","dayOfWeekFormatter","func","defaultCalendarMonth","any","defaultRangePosition","defaultValue","arrayOf","disableAutoMonthSwitching","disabled","disableDragEditing","disableFuture","disableHighlightToday","disableOpenPicker","disablePast","displayWeekNumber","fixedWeekNumber","number","format","formatDensity","inputRef","oneOfType","shape","current","label","node","loading","localeText","maxDate","minDate","onAccept","onChange","onClose","onError","onMonthChange","onOpen","onRangePositionChange","onSelectedSectionsChange","open","rangePosition","readOnly","reduceAnimations","renderLoading","selectedSections","endIndex","isRequired","startIndex","shouldDisableDate","showDaysOutsideCurrentMonth","slotProps","slots","sx","value","viewRenderers","day"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { useThemeProps } from '@mui/material/styles';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  const {\n      desktopModeMediaQuery = '@media (pointer: fine)'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref\n    }, other));\n  }\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars to render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the popover or modal will close after submitting the full date.\n   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overridable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Position the current month is rendered in.\n   * @default 1\n   */\n  currentMonthCalendarPosition: PropTypes.oneOf([1, 2, 3]),\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value={[null, null]}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * The initial position in the edited date range.\n   * Used when the component is not controlled.\n   * @default 'start'\n   */\n  defaultRangePosition: PropTypes.oneOf(['end', 'start']),\n  /**\n   * The default value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, editing dates by dragging is disabled.\n   * @default false\n   */\n  disableDragEditing: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * If `true`, the open picker button will not be rendered (renders only the field).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * If `true`, the week number will be display in the calendar.\n   */\n  displayWeekNumber: PropTypes.bool,\n  /**\n   * Calendar will show more weeks in order to match this value.\n   * Put it to 6 for having fix number of week in Gregorian calendars\n   * @default undefined\n   */\n  fixedWeekNumber: PropTypes.number,\n  /**\n   * Format of the date when rendered in the input(s).\n   * Defaults to localized format based on the used `views`.\n   */\n  format: PropTypes.string,\n  /**\n   * Density of the format when rendered in the input.\n   * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n   * @default \"dense\"\n   */\n  formatDensity: PropTypes.oneOf(['dense', 'spacious']),\n  /**\n   * Pass a ref to the `input` element.\n   * Ignored if the field has several inputs.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\n   * The label content.\n   * Ignored if the field has several inputs.\n   */\n  label: PropTypes.node,\n  /**\n   * If `true`, calls `renderLoading` instead of rendering the day calendar.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Locale for components texts.\n   * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n   */\n  localeText: PropTypes.object,\n  /**\n   * Maximal selectable date.\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date.\n   */\n  minDate: PropTypes.any,\n  /**\n   * Callback fired when the value is accepted.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value changes.\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TValue} value The new value.\n   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see `open`).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the error associated to the current value changes.\n   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n   *\n   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n   * @param {TError} error The new error describing why the current value is not valid.\n   * @param {TValue} value The value associated to the error.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback fired on month change.\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see `open`).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired when the range position changes.\n   * @param {RangePosition} rangePosition The new range position.\n   */\n  onRangePositionChange: PropTypes.func,\n  /**\n   * Callback fired when the selected sections change.\n   * @param {FieldSelectedSections} newValue The new selected sections.\n   */\n  onSelectedSectionsChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   * @default false\n   */\n  open: PropTypes.bool,\n  /**\n   * The position in the currently edited date range.\n   * Used when the component position is controlled.\n   */\n  rangePosition: PropTypes.oneOf(['end', 'start']),\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => \"...\"\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * The currently selected sections.\n   * This prop accept four formats:\n   * 1. If a number is provided, the section at this index will be selected.\n   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n   * 4. If `null` is provided, no section will be selected\n   * If not provided, the selected sections will be handled internally.\n   */\n  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({\n    endIndex: PropTypes.number.isRequired,\n    startIndex: PropTypes.number.isRequired\n  })]),\n  /**\n   * Disable specific date.\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * If `true`, days outside the current month are rendered:\n   *\n   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n   *\n   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n   *\n   * - ignored if `calendars` equals more than `1` on range pickers.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.arrayOf(PropTypes.any),\n  /**\n   * Define custom view renderers for each section.\n   * If `null`, the section will only have field editing.\n   * If `undefined`, internally defined view will be the used.\n   */\n  viewRenderers: PropTypes.shape({\n    day: PropTypes.func\n  })\n} : void 0;\nexport { DateRangePicker };"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,uBAAuB,CAAC;AAC3C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,aAAa,MAAM,6BAA6B;AACvD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,sBAAsB,QAAQ,2BAA2B;AAClE,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,eAAe,GAAG,aAAaR,KAAK,CAACS,UAAU,CAAC,SAASD,eAAeA,CAACE,OAAO,EAAEC,GAAG,EAAE;EAC3F,MAAMC,KAAK,GAAGT,aAAa,CAAC;IAC1BS,KAAK,EAAEF,OAAO;IACdG,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM;MACFC,qBAAqB,GAAG;IAC1B,CAAC,GAAGF,KAAK;IACTG,KAAK,GAAGjB,6BAA6B,CAACc,KAAK,EAAEb,SAAS,CAAC;;EAEzD;EACA,MAAMiB,SAAS,GAAGd,aAAa,CAACY,qBAAqB,EAAE;IACrDG,cAAc,EAAE;EAClB,CAAC,CAAC;EACF,IAAID,SAAS,EAAE;IACb,OAAO,aAAaT,IAAI,CAACH,sBAAsB,EAAEP,QAAQ,CAAC;MACxDc,GAAG,EAAEA;IACP,CAAC,EAAEI,KAAK,CAAC,CAAC;EACZ;EACA,OAAO,aAAaR,IAAI,CAACF,qBAAqB,EAAER,QAAQ,CAAC;IACvDc,GAAG,EAAEA;EACP,CAAC,EAAEI,KAAK,CAAC,CAAC;AACZ,CAAC,CAAC;AACFG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGZ,eAAe,CAACa,SAAS,GAAG;EAClE;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAErB,SAAS,CAACsB,IAAI;EACzB;AACF;AACA;AACA;EACEC,SAAS,EAAEvB,SAAS,CAACwB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACrC;AACF;AACA;EACEC,SAAS,EAAEzB,SAAS,CAAC0B,MAAM;EAC3B;AACF;AACA;AACA;EACEC,aAAa,EAAE3B,SAAS,CAACsB,IAAI;EAC7B;AACF;AACA;AACA;AACA;EACEM,UAAU,EAAE5B,SAAS,CAAC6B,MAAM;EAC5B;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE9B,SAAS,CAAC6B,MAAM;EACjC;AACF;AACA;AACA;EACEE,4BAA4B,EAAE/B,SAAS,CAACwB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD;AACF;AACA;AACA;AACA;AACA;EACEQ,kBAAkB,EAAEhC,SAAS,CAACiC,IAAI;EAClC;AACF;AACA;EACEC,oBAAoB,EAAElC,SAAS,CAACmC,GAAG;EACnC;AACF;AACA;AACA;AACA;EACEC,oBAAoB,EAAEpC,SAAS,CAACwB,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;EACvD;AACF;AACA;AACA;EACEa,YAAY,EAAErC,SAAS,CAACsC,OAAO,CAACtC,SAAS,CAACmC,GAAG,CAAC;EAC9C;AACF;AACA;AACA;AACA;EACEtB,qBAAqB,EAAEb,SAAS,CAAC0B,MAAM;EACvC;AACF;AACA;AACA;EACEa,yBAAyB,EAAEvC,SAAS,CAACsB,IAAI;EACzC;AACF;AACA;AACA;EACEkB,QAAQ,EAAExC,SAAS,CAACsB,IAAI;EACxB;AACF;AACA;AACA;EACEmB,kBAAkB,EAAEzC,SAAS,CAACsB,IAAI;EAClC;AACF;AACA;AACA;EACEoB,aAAa,EAAE1C,SAAS,CAACsB,IAAI;EAC7B;AACF;AACA;AACA;EACEqB,qBAAqB,EAAE3C,SAAS,CAACsB,IAAI;EACrC;AACF;AACA;AACA;EACEsB,iBAAiB,EAAE5C,SAAS,CAACsB,IAAI;EACjC;AACF;AACA;AACA;EACEuB,WAAW,EAAE7C,SAAS,CAACsB,IAAI;EAC3B;AACF;AACA;EACEwB,iBAAiB,EAAE9C,SAAS,CAACsB,IAAI;EACjC;AACF;AACA;AACA;AACA;EACEyB,eAAe,EAAE/C,SAAS,CAACgD,MAAM;EACjC;AACF;AACA;AACA;EACEC,MAAM,EAAEjD,SAAS,CAAC0B,MAAM;EACxB;AACF;AACA;AACA;AACA;EACEwB,aAAa,EAAElD,SAAS,CAACwB,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;EACrD;AACF;AACA;AACA;EACE2B,QAAQ,EAAEnD,SAAS,CAACoD,SAAS,CAAC,CAACpD,SAAS,CAACiC,IAAI,EAAEjC,SAAS,CAACqD,KAAK,CAAC;IAC7DC,OAAO,EAAEtD,SAAS,CAAC6B;EACrB,CAAC,CAAC,CAAC,CAAC;EACJ;AACF;AACA;AACA;EACE0B,KAAK,EAAEvD,SAAS,CAACwD,IAAI;EACrB;AACF;AACA;AACA;AACA;EACEC,OAAO,EAAEzD,SAAS,CAACsB,IAAI;EACvB;AACF;AACA;AACA;EACEoC,UAAU,EAAE1D,SAAS,CAAC6B,MAAM;EAC5B;AACF;AACA;EACE8B,OAAO,EAAE3D,SAAS,CAACmC,GAAG;EACtB;AACF;AACA;EACEyB,OAAO,EAAE5D,SAAS,CAACmC,GAAG;EACtB;AACF;AACA;AACA;AACA;EACE0B,QAAQ,EAAE7D,SAAS,CAACiC,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACE6B,QAAQ,EAAE9D,SAAS,CAACiC,IAAI;EACxB;AACF;AACA;AACA;EACE8B,OAAO,EAAE/D,SAAS,CAACiC,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE+B,OAAO,EAAEhE,SAAS,CAACiC,IAAI;EACvB;AACF;AACA;AACA;AACA;EACEgC,aAAa,EAAEjE,SAAS,CAACiC,IAAI;EAC7B;AACF;AACA;AACA;EACEiC,MAAM,EAAElE,SAAS,CAACiC,IAAI;EACtB;AACF;AACA;AACA;EACEkC,qBAAqB,EAAEnE,SAAS,CAACiC,IAAI;EACrC;AACF;AACA;AACA;EACEmC,wBAAwB,EAAEpE,SAAS,CAACiC,IAAI;EACxC;AACF;AACA;AACA;EACEoC,IAAI,EAAErE,SAAS,CAACsB,IAAI;EACpB;AACF;AACA;AACA;EACEgD,aAAa,EAAEtE,SAAS,CAACwB,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;EAChD+C,QAAQ,EAAEvE,SAAS,CAACsB,IAAI;EACxB;AACF;AACA;AACA;EACEkD,gBAAgB,EAAExE,SAAS,CAACsB,IAAI;EAChC;AACF;AACA;AACA;AACA;EACEmD,aAAa,EAAEzE,SAAS,CAACiC,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyC,gBAAgB,EAAE1E,SAAS,CAACoD,SAAS,CAAC,CAACpD,SAAS,CAACwB,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,EAAExB,SAAS,CAACgD,MAAM,EAAEhD,SAAS,CAACqD,KAAK,CAAC;IAC/KsB,QAAQ,EAAE3E,SAAS,CAACgD,MAAM,CAAC4B,UAAU;IACrCC,UAAU,EAAE7E,SAAS,CAACgD,MAAM,CAAC4B;EAC/B,CAAC,CAAC,CAAC,CAAC;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,iBAAiB,EAAE9E,SAAS,CAACiC,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE8C,2BAA2B,EAAE/E,SAAS,CAACsB,IAAI;EAC3C;AACF;AACA;AACA;EACE0D,SAAS,EAAEhF,SAAS,CAAC6B,MAAM;EAC3B;AACF;AACA;AACA;EACEoD,KAAK,EAAEjF,SAAS,CAAC6B,MAAM;EACvB;AACF;AACA;EACEqD,EAAE,EAAElF,SAAS,CAACoD,SAAS,CAAC,CAACpD,SAAS,CAACsC,OAAO,CAACtC,SAAS,CAACoD,SAAS,CAAC,CAACpD,SAAS,CAACiC,IAAI,EAAEjC,SAAS,CAAC6B,MAAM,EAAE7B,SAAS,CAACsB,IAAI,CAAC,CAAC,CAAC,EAAEtB,SAAS,CAACiC,IAAI,EAAEjC,SAAS,CAAC6B,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;AACA;EACEsD,KAAK,EAAEnF,SAAS,CAACsC,OAAO,CAACtC,SAAS,CAACmC,GAAG,CAAC;EACvC;AACF;AACA;AACA;AACA;EACEiD,aAAa,EAAEpF,SAAS,CAACqD,KAAK,CAAC;IAC7BgC,GAAG,EAAErF,SAAS,CAACiC;EACjB,CAAC;AACH,CAAC,GAAG,KAAK,CAAC;AACV,SAAS1B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}