{"ast":null,"code":"var _jsxFileName = \"/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/src/TextField3.js\";\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport './css/style.css';\nimport UseFetchCurrencies from './Fetch/useFetchCurrencies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextField3(_ref) {\n  let {\n    onChange,\n    data\n  } = _ref;\n  // Filter any string to only number string\n  function filterNumbersFromString(str) {\n    const regex = /\\d+/g;\n    const numbers = str.match(regex);\n    return numbers ? numbers.join('') : '';\n  }\n  const HandlingChange = e => {\n    var value = e.target.value;\n    onChange(filterNumbersFromString(value));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"textField34\",\n      label: \"\",\n      variant: \"filled\",\n      color: \"primary\",\n      fullWidth: true,\n      onChange: HandlingChange,\n      value: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_c = TextField3;\nvar _c;\n$RefreshReg$(_c, \"TextField3\");","map":{"version":3,"names":["React","TextField","UseFetchCurrencies","jsxDEV","_jsxDEV","TextField3","_ref","onChange","data","filterNumbersFromString","str","regex","numbers","match","join","HandlingChange","e","value","target","children","id","label","variant","color","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/src/TextField3.js"],"sourcesContent":["import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport './css/style.css'\nimport UseFetchCurrencies from './Fetch/useFetchCurrencies';\n\n\n\nexport default function TextField3({ onChange, data }) {\n\n    // Filter any string to only number string\n    function filterNumbersFromString(str) {\n        const regex = /\\d+/g;\n        const numbers = str.match(regex);\n        return numbers ? numbers.join('') : '';\n    }\n\n    const HandlingChange = (e) => {\n        var value = e.target.value;\n        onChange(filterNumbersFromString(value));\n    }\n\n    return (\n        <div>\n            <TextField id=\"textField34\" label=\"\" variant=\"filled\" color='primary' fullWidth\n                onChange={HandlingChange}\n                value={data} />\n        </div>\n    )\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAO,iBAAiB;AACxB,OAAOC,kBAAkB,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI5D,eAAe,SAASC,UAAUA,CAAAC,IAAA,EAAqB;EAAA,IAApB;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAAF,IAAA;EAEjD;EACA,SAASG,uBAAuBA,CAACC,GAAG,EAAE;IAClC,MAAMC,KAAK,GAAG,MAAM;IACpB,MAAMC,OAAO,GAAGF,GAAG,CAACG,KAAK,CAACF,KAAK,CAAC;IAChC,OAAOC,OAAO,GAAGA,OAAO,CAACE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE;EAC1C;EAEA,MAAMC,cAAc,GAAIC,CAAC,IAAK;IAC1B,IAAIC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC1BV,QAAQ,CAACE,uBAAuB,CAACQ,KAAK,CAAC,CAAC;EAC5C,CAAC;EAED,oBACIb,OAAA;IAAAe,QAAA,eACIf,OAAA,CAACH,SAAS;MAACmB,EAAE,EAAC,aAAa;MAACC,KAAK,EAAC,EAAE;MAACC,OAAO,EAAC,QAAQ;MAACC,KAAK,EAAC,SAAS;MAACC,SAAS;MAC3EjB,QAAQ,EAAEQ,cAAe;MACzBE,KAAK,EAAET;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEd;AAACC,EAAA,GArBuBxB,UAAU;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}