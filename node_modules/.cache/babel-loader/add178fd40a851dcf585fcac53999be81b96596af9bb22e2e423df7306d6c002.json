{"ast":null,"code":"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport '../Styles/style.css';\n\n//Return name of the currencies\nfunction convertCurrencyAbbreviations(input) {\n  const currencyMappings = {\n    SGD: \"Singapore Dollar\",\n    MYR: \"Malaysian Ringgit\",\n    EUR: \"Euro\",\n    USD: \"US Dollar\",\n    AUD: \"Australian Dollar\",\n    JPY: \"Japanese Yen\",\n    CNH: \"Chinese Yuan\",\n    HKD: \"Hong Kong Dollar\",\n    CAD: \"Canadian Dollar\",\n    INR: \"Indian Rupee\",\n    DKK: \"Danish Krone\",\n    GBP: \"British Pound\",\n    RUB: \"Russian Ruble\",\n    NZD: \"New Zealand Dollar\",\n    MXN: \"Mexican Peso\",\n    IDR: \"Indonesian Rupiah\",\n    TWD: \"Taiwan Dollar\",\n    THB: \"Thai Baht\",\n    VND: \"Vietnamese Dong\"\n  };\n  const abbreviations = Object.keys(currencyMappings);\n  const regex = new RegExp(abbreviations.join(\"|\"), \"gi\");\n  return input.replace(regex, match => currencyMappings[match.toUpperCase()] || match);\n}\nexport default function FromCurrencyTextField(props) {\n\n  // return (\n  //     <TextField\n  //         id='textField1' variant=\"outlined\" fullWidth value={convertCurrencyAbbreviations(props.data)}\n  //         autoComplete='ABC'\n  //     />\n  // )\n}\n_c = FromCurrencyTextField;\nvar _c;\n$RefreshReg$(_c, \"FromCurrencyTextField\");","map":{"version":3,"names":["React","TextField","convertCurrencyAbbreviations","input","currencyMappings","SGD","MYR","EUR","USD","AUD","JPY","CNH","HKD","CAD","INR","DKK","GBP","RUB","NZD","MXN","IDR","TWD","THB","VND","abbreviations","Object","keys","regex","RegExp","join","replace","match","toUpperCase","FromCurrencyTextField","props","_c","$RefreshReg$"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/src/Components/FromCurrencyTextField.js"],"sourcesContent":["import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport '../Styles/style.css'\n\n//Return name of the currencies\nfunction convertCurrencyAbbreviations(input) {\n    const currencyMappings = {\n        SGD: \"Singapore Dollar\",\n        MYR: \"Malaysian Ringgit\",\n        EUR: \"Euro\",\n        USD: \"US Dollar\",\n        AUD: \"Australian Dollar\",\n        JPY: \"Japanese Yen\",\n        CNH: \"Chinese Yuan\",\n        HKD: \"Hong Kong Dollar\",\n        CAD: \"Canadian Dollar\",\n        INR: \"Indian Rupee\",\n        DKK: \"Danish Krone\",\n        GBP: \"British Pound\",\n        RUB: \"Russian Ruble\",\n        NZD: \"New Zealand Dollar\",\n        MXN: \"Mexican Peso\",\n        IDR: \"Indonesian Rupiah\",\n        TWD: \"Taiwan Dollar\",\n        THB: \"Thai Baht\",\n        VND: \"Vietnamese Dong\"\n    };\n\n    const abbreviations = Object.keys(currencyMappings);\n    const regex = new RegExp(abbreviations.join(\"|\"), \"gi\");\n\n    return input.replace(regex, match => currencyMappings[match.toUpperCase()] || match);\n}\n\nexport default function FromCurrencyTextField(props) {\n\n    // return (\n    //     <TextField\n    //         id='textField1' variant=\"outlined\" fullWidth value={convertCurrencyAbbreviations(props.data)}\n    //         autoComplete='ABC'\n    //     />\n    // )\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAO,qBAAqB;;AAE5B;AACA,SAASC,4BAA4BA,CAACC,KAAK,EAAE;EACzC,MAAMC,gBAAgB,GAAG;IACrBC,GAAG,EAAE,kBAAkB;IACvBC,GAAG,EAAE,mBAAmB;IACxBC,GAAG,EAAE,MAAM;IACXC,GAAG,EAAE,WAAW;IAChBC,GAAG,EAAE,mBAAmB;IACxBC,GAAG,EAAE,cAAc;IACnBC,GAAG,EAAE,cAAc;IACnBC,GAAG,EAAE,kBAAkB;IACvBC,GAAG,EAAE,iBAAiB;IACtBC,GAAG,EAAE,cAAc;IACnBC,GAAG,EAAE,cAAc;IACnBC,GAAG,EAAE,eAAe;IACpBC,GAAG,EAAE,eAAe;IACpBC,GAAG,EAAE,oBAAoB;IACzBC,GAAG,EAAE,cAAc;IACnBC,GAAG,EAAE,mBAAmB;IACxBC,GAAG,EAAE,eAAe;IACpBC,GAAG,EAAE,WAAW;IAChBC,GAAG,EAAE;EACT,CAAC;EAED,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACtB,gBAAgB,CAAC;EACnD,MAAMuB,KAAK,GAAG,IAAIC,MAAM,CAACJ,aAAa,CAACK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC;EAEvD,OAAO1B,KAAK,CAAC2B,OAAO,CAACH,KAAK,EAAEI,KAAK,IAAI3B,gBAAgB,CAAC2B,KAAK,CAACC,WAAW,CAAC,CAAC,CAAC,IAAID,KAAK,CAAC;AACxF;AAEA,eAAe,SAASE,qBAAqBA,CAACC,KAAK,EAAE;;EAEjD;EACA;EACA;EACA;EACA;EACA;AAAA;AACHC,EAAA,GARuBF,qBAAqB;AAAA,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}