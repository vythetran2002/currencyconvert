{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst url = require('url');\nconst httpLib = require('../lib/http');\n\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\nlet RequestOptions; // eslint-disable-line\n\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\nfunction getRequestOptions(aUrl) {\n  //eslint-disable-next-line node/no-deprecated-api\n  let options = url.parse(aUrl);\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl);\n  }\n  // Delete the search and has portions as they are not used.\n  options.search = null;\n  options.hash = null;\n  options.path = options.pathname;\n  options.hostname = options.hostname === 'localhost' ? '127.0.0.1' : options.hostname; // To support Node 17 and above. Refer https://github.com/nodejs/node/issues/40702 for details.\n  return options;\n}\n\n/** @const {string} */\nconst USER_AGENT = function () {\n  const version = require('../package.json').version;\n  const platform = {\n    darwin: 'mac',\n    win32: 'windows'\n  }[process.platform] || 'linux';\n  return `selenium/${version} (js ${platform})`;\n}();\n\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\nclass HttpClient {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   * @param {?Object.<string,Object>} client_options\n   */\n  constructor(serverUrl, opt_agent, opt_proxy) {\n    let client_options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null;\n\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n    this.options_ = getRequestOptions(serverUrl);\n\n    /**\n     * client options, header overrides\n     */\n    this.client_options = client_options;\n\n    /**\n     * sets keep-alive for the agent\n     * see https://stackoverflow.com/a/58332910\n     */\n    this.keepAlive = this.client_options['keep-alive'];\n\n    /**  @private {?RequestOptions} */\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;\n  }\n  get keepAlive() {\n    return this.agent_.keepAlive;\n  }\n  set keepAlive(value) {\n    if (value === 'true' || value === true) {\n      this.agent_.keepAlive = true;\n    }\n  }\n\n  /** @override */\n  send(httpRequest) {\n    let data;\n    let headers = {};\n    if (httpRequest.headers) {\n      httpRequest.headers.forEach(function (value, name) {\n        headers[name] = value;\n      });\n    }\n    headers['User-Agent'] = this.client_options['user-agent'] || USER_AGENT;\n    headers['Content-Length'] = 0;\n    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n      data = JSON.stringify(httpRequest.data);\n      headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n      headers['Content-Type'] = 'application/json;charset=UTF-8';\n    }\n    let path = this.options_.path;\n    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n      path += httpRequest.path.substring(1);\n    } else {\n      path += httpRequest.path;\n    }\n    //eslint-disable-next-line node/no-deprecated-api\n    let parsedPath = url.parse(path);\n    let options = {\n      agent: this.agent_ || null,\n      method: httpRequest.method,\n      auth: this.options_.auth,\n      hostname: this.options_.hostname,\n      port: this.options_.port,\n      protocol: this.options_.protocol,\n      path: parsedPath.path,\n      pathname: parsedPath.pathname,\n      search: parsedPath.search,\n      hash: parsedPath.hash,\n      headers\n    };\n    return new Promise((fulfill, reject) => {\n      sendRequest(options, fulfill, reject, data, this.proxyOptions_);\n    });\n  }\n}\n\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n * @param {number=} opt_retries The current number of retries.\n */\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy, opt_retries) {\n  var hostname = options.hostname;\n  var port = options.port;\n  if (opt_proxy) {\n    let proxy = /** @type {RequestOptions} */opt_proxy;\n\n    // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n    let absoluteUri = url.format(options);\n\n    // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n    let targetHost = options.hostname;\n    if (options.port) {\n      targetHost += ':' + options.port;\n    }\n\n    // Update the request options with our proxy info.\n    options.headers['Host'] = targetHost;\n    options.path = absoluteUri;\n    options.host = proxy.host;\n    options.hostname = proxy.hostname;\n    options.port = proxy.port;\n\n    // Update the protocol to avoid EPROTO errors when the webdriver proxy\n    // uses a different protocol from the remote selenium server.\n    options.protocol = opt_proxy.protocol;\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64');\n    }\n  }\n  let requestFn = options.protocol === 'https:' ? https.request : http.request;\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      let location;\n      try {\n        // eslint-disable-next-line node/no-deprecated-api\n        location = url.parse(response.headers['location']);\n      } catch (ex) {\n        onError(Error('Failed to parse \"Location\" header for server redirect: ' + ex.message + '\\nResponse was: \\n' + new httpLib.Response(response.statusCode, response.headers, '')));\n        return;\n      }\n      if (!location.hostname) {\n        location.hostname = hostname;\n        location.port = port;\n        location.auth = options.auth;\n      }\n      request.destroy();\n      sendRequest({\n        method: 'GET',\n        protocol: location.protocol || options.protocol,\n        hostname: location.hostname,\n        port: location.port,\n        path: location.path,\n        auth: location.auth,\n        pathname: location.pathname,\n        search: location.search,\n        hash: location.hash,\n        headers: {\n          Accept: 'application/json; charset=utf-8',\n          'User-Agent': options.headers['User-Agent'] || USER_AGENT\n        }\n      }, onOk, onError, undefined, opt_proxy);\n      return;\n    }\n    const body = [];\n    response.on('data', body.push.bind(body));\n    response.on('end', function () {\n      const resp = new httpLib.Response( /** @type {number} */response.statusCode, /** @type {!Object<string>} */response.headers, Buffer.concat(body).toString('utf8').replace(/\\0/g, ''));\n      onOk(resp);\n    });\n  });\n  request.on('error', function (e) {\n    if (typeof opt_retries === 'undefined') {\n      opt_retries = 0;\n    }\n    if (shouldRetryRequest(opt_retries, e)) {\n      opt_retries += 1;\n      setTimeout(function () {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy, opt_retries);\n      }, 15);\n    } else {\n      let message = e.message;\n      if (e.code) {\n        message = e.code + ' ' + message;\n      }\n      onError(new Error(message));\n    }\n  });\n  if (opt_data) {\n    request.write(opt_data);\n  }\n  request.end();\n}\nconst MAX_RETRIES = 3;\n\n/**\n * A retry is sometimes needed on Windows where we may quickly run out of\n * ephemeral ports. A more robust solution is bumping the MaxUserPort setting\n * as described here: http://msdn.microsoft.com/en-us/library/aa560610%28v=bts.20%29.aspx\n *\n * @param {!number} retries\n * @param {!Error} err\n * @return {boolean}\n */\nfunction shouldRetryRequest(retries, err) {\n  return retries < MAX_RETRIES && isRetryableNetworkError(err);\n}\n\n/**\n * @param {!Error} err\n * @return {boolean}\n */\nfunction isRetryableNetworkError(err) {\n  if (err && err.code) {\n    return err.code === 'ECONNABORTED' || err.code === 'ECONNRESET' || err.code === 'ECONNREFUSED' || err.code === 'EADDRINUSE' || err.code === 'EPIPE' || err.code === 'ETIMEDOUT';\n  }\n  return false;\n}\n\n// PUBLIC API\n\nmodule.exports.Agent = http.Agent;\nmodule.exports.Executor = httpLib.Executor;\nmodule.exports.HttpClient = HttpClient;\nmodule.exports.Request = httpLib.Request;\nmodule.exports.Response = httpLib.Response;","map":{"version":3,"names":["http","require","https","url","httpLib","RequestOptions","getRequestOptions","aUrl","options","parse","hostname","Error","search","hash","path","pathname","USER_AGENT","version","platform","darwin","win32","process","HttpClient","constructor","serverUrl","opt_agent","opt_proxy","client_options","arguments","length","undefined","agent_","options_","keepAlive","proxyOptions_","value","send","httpRequest","data","headers","forEach","name","method","JSON","stringify","Buffer","byteLength","endsWith","startsWith","substring","parsedPath","agent","auth","port","protocol","Promise","fulfill","reject","sendRequest","onOk","onError","opt_data","opt_retries","proxy","absoluteUri","format","targetHost","host","from","toString","requestFn","request","onResponse","response","statusCode","location","ex","message","Response","destroy","Accept","body","on","push","bind","resp","concat","replace","e","shouldRetryRequest","setTimeout","code","write","end","MAX_RETRIES","retries","err","isRetryableNetworkError","module","exports","Agent","Executor","Request"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/selenium-webdriver/http/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n\n'use strict'\n\nconst http = require('http')\nconst https = require('https')\nconst url = require('url')\n\nconst httpLib = require('../lib/http')\n\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\nlet RequestOptions // eslint-disable-line\n\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\nfunction getRequestOptions(aUrl) {\n  //eslint-disable-next-line node/no-deprecated-api\n  let options = url.parse(aUrl)\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl)\n  }\n  // Delete the search and has portions as they are not used.\n  options.search = null\n  options.hash = null\n  options.path = options.pathname\n  options.hostname =\n    options.hostname === 'localhost' ? '127.0.0.1' : options.hostname // To support Node 17 and above. Refer https://github.com/nodejs/node/issues/40702 for details.\n  return options\n}\n\n/** @const {string} */\nconst USER_AGENT = (function () {\n  const version = require('../package.json').version\n  const platform =\n    { darwin: 'mac', win32: 'windows' }[process.platform] || 'linux'\n  return `selenium/${version} (js ${platform})`\n})()\n\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\nclass HttpClient {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   * @param {?Object.<string,Object>} client_options\n   */\n  constructor(serverUrl, opt_agent, opt_proxy, client_options = {}) {\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null\n\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n    this.options_ = getRequestOptions(serverUrl)\n\n    /**\n     * client options, header overrides\n     */\n    this.client_options = client_options\n\n    /**\n     * sets keep-alive for the agent\n     * see https://stackoverflow.com/a/58332910\n     */\n    this.keepAlive = this.client_options['keep-alive']\n\n    /**  @private {?RequestOptions} */\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null\n  }\n\n  get keepAlive() {\n    return this.agent_.keepAlive\n  }\n\n  set keepAlive(value) {\n    if (value === 'true' || value === true) {\n      this.agent_.keepAlive = true\n    }\n  }\n\n  /** @override */\n  send(httpRequest) {\n    let data\n\n    let headers = {}\n\n    if (httpRequest.headers) {\n      httpRequest.headers.forEach(function (value, name) {\n        headers[name] = value\n      })\n    }\n\n    headers['User-Agent'] = this.client_options['user-agent'] || USER_AGENT\n    headers['Content-Length'] = 0\n    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n      data = JSON.stringify(httpRequest.data)\n      headers['Content-Length'] = Buffer.byteLength(data, 'utf8')\n      headers['Content-Type'] = 'application/json;charset=UTF-8'\n    }\n\n    let path = this.options_.path\n    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n      path += httpRequest.path.substring(1)\n    } else {\n      path += httpRequest.path\n    }\n    //eslint-disable-next-line node/no-deprecated-api\n    let parsedPath = url.parse(path)\n\n    let options = {\n      agent: this.agent_ || null,\n      method: httpRequest.method,\n\n      auth: this.options_.auth,\n      hostname: this.options_.hostname,\n      port: this.options_.port,\n      protocol: this.options_.protocol,\n\n      path: parsedPath.path,\n      pathname: parsedPath.pathname,\n      search: parsedPath.search,\n      hash: parsedPath.hash,\n\n      headers,\n    }\n\n    return new Promise((fulfill, reject) => {\n      sendRequest(options, fulfill, reject, data, this.proxyOptions_)\n    })\n  }\n}\n\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n * @param {number=} opt_retries The current number of retries.\n */\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy, opt_retries) {\n  var hostname = options.hostname\n  var port = options.port\n\n  if (opt_proxy) {\n    let proxy = /** @type {RequestOptions} */ (opt_proxy)\n\n    // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n    let absoluteUri = url.format(options)\n\n    // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n    let targetHost = options.hostname\n    if (options.port) {\n      targetHost += ':' + options.port\n    }\n\n    // Update the request options with our proxy info.\n    options.headers['Host'] = targetHost\n    options.path = absoluteUri\n    options.host = proxy.host\n    options.hostname = proxy.hostname\n    options.port = proxy.port\n\n    // Update the protocol to avoid EPROTO errors when the webdriver proxy\n    // uses a different protocol from the remote selenium server.\n    options.protocol = opt_proxy.protocol\n\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] =\n        'Basic ' + Buffer.from(proxy.auth).toString('base64')\n    }\n  }\n\n  let requestFn = options.protocol === 'https:' ? https.request : http.request\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      let location\n      try {\n        // eslint-disable-next-line node/no-deprecated-api\n        location = url.parse(response.headers['location'])\n      } catch (ex) {\n        onError(\n          Error(\n            'Failed to parse \"Location\" header for server redirect: ' +\n              ex.message +\n              '\\nResponse was: \\n' +\n              new httpLib.Response(response.statusCode, response.headers, '')\n          )\n        )\n        return\n      }\n\n      if (!location.hostname) {\n        location.hostname = hostname\n        location.port = port\n        location.auth = options.auth\n      }\n\n      request.destroy()\n      sendRequest(\n        {\n          method: 'GET',\n          protocol: location.protocol || options.protocol,\n          hostname: location.hostname,\n          port: location.port,\n          path: location.path,\n          auth: location.auth,\n          pathname: location.pathname,\n          search: location.search,\n          hash: location.hash,\n          headers: {\n            Accept: 'application/json; charset=utf-8',\n            'User-Agent': options.headers['User-Agent'] || USER_AGENT,\n          },\n        },\n        onOk,\n        onError,\n        undefined,\n        opt_proxy\n      )\n      return\n    }\n\n    const body = []\n    response.on('data', body.push.bind(body))\n    response.on('end', function () {\n      const resp = new httpLib.Response(\n        /** @type {number} */ (response.statusCode),\n        /** @type {!Object<string>} */ (response.headers),\n        Buffer.concat(body).toString('utf8').replace(/\\0/g, '')\n      )\n      onOk(resp)\n    })\n  })\n\n  request.on('error', function (e) {\n    if (typeof opt_retries === 'undefined') {\n      opt_retries = 0\n    }\n\n    if (shouldRetryRequest(opt_retries, e)) {\n      opt_retries += 1\n      setTimeout(function () {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy, opt_retries)\n      }, 15)\n    } else {\n      let message = e.message\n      if (e.code) {\n        message = e.code + ' ' + message\n      }\n      onError(new Error(message))\n    }\n  })\n\n  if (opt_data) {\n    request.write(opt_data)\n  }\n\n  request.end()\n}\n\nconst MAX_RETRIES = 3\n\n/**\n * A retry is sometimes needed on Windows where we may quickly run out of\n * ephemeral ports. A more robust solution is bumping the MaxUserPort setting\n * as described here: http://msdn.microsoft.com/en-us/library/aa560610%28v=bts.20%29.aspx\n *\n * @param {!number} retries\n * @param {!Error} err\n * @return {boolean}\n */\nfunction shouldRetryRequest(retries, err) {\n  return retries < MAX_RETRIES && isRetryableNetworkError(err)\n}\n\n/**\n * @param {!Error} err\n * @return {boolean}\n */\nfunction isRetryableNetworkError(err) {\n  if (err && err.code) {\n    return (\n      err.code === 'ECONNABORTED' ||\n      err.code === 'ECONNRESET' ||\n      err.code === 'ECONNREFUSED' ||\n      err.code === 'EADDRINUSE' ||\n      err.code === 'EPIPE' ||\n      err.code === 'ETIMEDOUT'\n    )\n  }\n\n  return false\n}\n\n// PUBLIC API\n\nmodule.exports.Agent = http.Agent\nmodule.exports.Executor = httpLib.Executor\nmodule.exports.HttpClient = HttpClient\nmodule.exports.Request = httpLib.Request\nmodule.exports.Response = httpLib.Response\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}