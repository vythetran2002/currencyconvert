{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  PrimitiveType,\n  NonPrimitiveType,\n  RemoteType\n} = require('./protocolType');\nconst TYPE_CONSTANT = 'type';\nconst VALUE_CONSTANT = 'value';\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'shareId'\n};\nclass LocalValue {\n  constructor(type) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type;\n    } else {\n      this.type = type;\n      this.value = value;\n    }\n  }\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value);\n  }\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value);\n  }\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value);\n  }\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED);\n  }\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL);\n  }\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value);\n  }\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value);\n  }\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value);\n  }\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value);\n  }\n  static createMapValue(map) {\n    let value = [];\n    Object.entries(map).forEach(entry => {\n      value.push(entry);\n    });\n    return new LocalValue(NonPrimitiveType.MAP, value);\n  }\n  static createObjectValue(map) {\n    let value = [];\n    Object.entries(map).forEach(entry => {\n      value.push(entry);\n    });\n    return new LocalValue(NonPrimitiveType.OBJECT, value);\n  }\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value);\n  }\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value);\n  }\n  toJson() {\n    let toReturn = {};\n    toReturn[TYPE_CONSTANT] = this.type;\n    if (!(this.type === PrimitiveType.NULL || this.type === PrimitiveType.UNDEFINED)) {\n      toReturn[VALUE_CONSTANT] = this.value;\n    }\n    return toReturn;\n  }\n}\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null;\n    this.handle = null;\n    this.internalId = null;\n    this.value = null;\n    this.sharedId = null;\n    if ('type' in remoteValue) {\n      var typeString = remoteValue['type'];\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString);\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString);\n      } else {\n        this.type = RemoteType.findByName(typeString);\n      }\n    }\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle'];\n    }\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId'];\n    }\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value'];\n    }\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId'];\n    }\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type);\n    }\n  }\n  deserializeValue(value, type) {\n    if ([NonPrimitiveType.MAP, NonPrimitiveType.OBJECT].includes(type)) {\n      return Object.fromEntries(value);\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags);\n    }\n    return value;\n  }\n}\nclass ReferenceValue {\n  constructor(handle, shareId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.handle = shareId;\n    } else {\n      this.handle = handle;\n      this.shareId = shareId;\n    }\n  }\n  asMap() {\n    const toReturn = {};\n    if (this.handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.handle;\n    }\n    if (this.shareId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.shareId;\n    }\n    return toReturn;\n  }\n}\nclass RegExpValue {\n  constructor(pattern) {\n    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.pattern = pattern;\n    this.flags = flags;\n  }\n}\nmodule.exports = {\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue\n};","map":{"version":3,"names":["PrimitiveType","NonPrimitiveType","RemoteType","require","TYPE_CONSTANT","VALUE_CONSTANT","RemoteReferenceType","HANDLE","SHARED_ID","LocalValue","constructor","type","value","arguments","length","undefined","UNDEFINED","NULL","createStringValue","STRING","createNumberValue","NUMBER","createSpecialNumberValue","SPECIAL_NUMBER","createUndefinedValue","createNullValue","createBooleanValue","BOOLEAN","createBigIntValue","BIGINT","createArrayValue","ARRAY","createDateValue","DATE","createMapValue","map","Object","entries","forEach","entry","push","MAP","createObjectValue","OBJECT","createRegularExpressionValue","REGULAR_EXPRESSION","createSetValue","SET","toJson","toReturn","RemoteValue","remoteValue","handle","internalId","sharedId","typeString","findByName","deserializeValue","includes","fromEntries","RegExpValue","pattern","flags","ReferenceValue","shareId","asMap","module","exports"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/selenium-webdriver/bidi/protocolValue.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  PrimitiveType,\n  NonPrimitiveType,\n  RemoteType,\n} = require('./protocolType')\n\nconst TYPE_CONSTANT = 'type'\nconst VALUE_CONSTANT = 'value'\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'shareId',\n}\n\nclass LocalValue {\n  constructor(type, value = null) {\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type\n    } else {\n      this.type = type\n      this.value = value\n    }\n  }\n\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value)\n  }\n\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value)\n  }\n\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value)\n  }\n\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED)\n  }\n\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL)\n  }\n\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value)\n  }\n\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value)\n  }\n\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value)\n  }\n\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value)\n  }\n\n  static createMapValue(map) {\n    let value = []\n    Object.entries(map).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.MAP, value)\n  }\n\n  static createObjectValue(map) {\n    let value = []\n    Object.entries(map).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.OBJECT, value)\n  }\n\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value)\n  }\n\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value)\n  }\n\n  toJson() {\n    let toReturn = {}\n    toReturn[TYPE_CONSTANT] = this.type\n\n    if (\n      !(\n        this.type === PrimitiveType.NULL ||\n        this.type === PrimitiveType.UNDEFINED\n      )\n    ) {\n      toReturn[VALUE_CONSTANT] = this.value\n    }\n    return toReturn\n  }\n}\n\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null\n    this.handle = null\n    this.internalId = null\n    this.value = null\n    this.sharedId = null\n\n    if ('type' in remoteValue) {\n      var typeString = remoteValue['type']\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString)\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString)\n      } else {\n        this.type = RemoteType.findByName(typeString)\n      }\n    }\n\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle']\n    }\n\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId']\n    }\n\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value']\n    }\n\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId']\n    }\n\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type)\n    }\n  }\n\n  deserializeValue(value, type) {\n    if ([NonPrimitiveType.MAP, NonPrimitiveType.OBJECT].includes(type)) {\n      return Object.fromEntries(value)\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags)\n    }\n    return value\n  }\n}\n\nclass ReferenceValue {\n  constructor(handle, shareId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.handle = shareId\n    } else {\n      this.handle = handle\n      this.shareId = shareId\n    }\n  }\n\n  asMap() {\n    const toReturn = {}\n    if (this.handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.handle\n    }\n\n    if (this.shareId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.shareId\n    }\n\n    return toReturn\n  }\n}\n\nclass RegExpValue {\n  constructor(pattern, flags = null) {\n    this.pattern = pattern\n    this.flags = flags\n  }\n}\n\nmodule.exports = {\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}