{"ast":null,"code":"var _jsxFileName = \"/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/src/Api/test.js\";\n// import * as React from 'react';\n// import TextField from '@mui/material/TextField';\n// import Autocomplete from '@mui/material/Autocomplete';\n// import { Grid } from '@mui/material';\n// import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';\n// import './style.css'\n\n// const options = ['Option 1', 'Option 2', 'Option 3'];\n\n// const CustomInput = ({ label, ...props }) => {\n//     return (\n//         <Grid container spacing={1} alignItems=\"center\">\n//             <Grid item>\n//                 <AddPhotoAlternateIcon />\n//             </Grid>\n//             <Grid item xs>\n//                 <TextField {...props} label={label} variant=\"outlined\" />\n//             </Grid>\n//         </Grid>\n//     );\n// };\n\n// export default function Test() {\n\n//     const [value, setValue] = React.useState(options[0]);\n//     const [inputValue, setInputValue] = React.useState('');\n\n//     return (\n//         <div>\n//             <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\n//             <div>{`inputValue: '${inputValue}'`}</div>\n//             <hr />\n//             <Autocomplete\n//                 value={value}\n//                 onChange={(event, newValue) => {\n//                     setValue(newValue);\n//                 }}\n//                 id=\"controllable-states-demo\"\n//                 options={options}\n//                 sx={{ width: 300 }}\n//                 renderInput={(params) => <CustomInput {...params} label=\"Searchzzz\" />}\n//             />\n//         </div>\n//     );\n// }\n\n// ---\nimport * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  label: 'Option 1'\n}, {\n  label: 'Option 2'\n}, {\n  label: 'Option 3'\n}];\nexport default function MyAutocomplete() {\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"autocomplete-input\",\n    options: options,\n    getOptionLabel: option => option.label,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n      ...params,\n      label: \"Search\",\n      variant: \"outlined\",\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this),\n    renderOption: (props, option, state) => /*#__PURE__*/_jsxDEV(\"li\", {\n      ...props,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: '#f0f0f0',\n              height: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            value: option.label,\n            variant: \"outlined\",\n            size: \"small\",\n            InputProps: {\n              readOnly: true,\n              disableUnderline: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_c = MyAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"MyAutocomplete\");","map":{"version":3,"names":["React","Autocomplete","TextField","Grid","jsxDEV","_jsxDEV","options","label","MyAutocomplete","id","getOptionLabel","option","renderInput","params","variant","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","renderOption","props","state","children","container","alignItems","item","xs","style","background","height","value","size","InputProps","readOnly","disableUnderline","_c","$RefreshReg$"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/src/Api/test.js"],"sourcesContent":["// import * as React from 'react';\n// import TextField from '@mui/material/TextField';\n// import Autocomplete from '@mui/material/Autocomplete';\n// import { Grid } from '@mui/material';\n// import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';\n// import './style.css'\n\n// const options = ['Option 1', 'Option 2', 'Option 3'];\n\n// const CustomInput = ({ label, ...props }) => {\n//     return (\n//         <Grid container spacing={1} alignItems=\"center\">\n//             <Grid item>\n//                 <AddPhotoAlternateIcon />\n//             </Grid>\n//             <Grid item xs>\n//                 <TextField {...props} label={label} variant=\"outlined\" />\n//             </Grid>\n//         </Grid>\n//     );\n// };\n\n// export default function Test() {\n\n//     const [value, setValue] = React.useState(options[0]);\n//     const [inputValue, setInputValue] = React.useState('');\n\n//     return (\n//         <div>\n//             <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\n//             <div>{`inputValue: '${inputValue}'`}</div>\n//             <hr />\n//             <Autocomplete\n//                 value={value}\n//                 onChange={(event, newValue) => {\n//                     setValue(newValue);\n//                 }}\n//                 id=\"controllable-states-demo\"\n//                 options={options}\n//                 sx={{ width: 300 }}\n//                 renderInput={(params) => <CustomInput {...params} label=\"Searchzzz\" />}\n//             />\n//         </div>\n//     );\n// }\n\n// ---\nimport * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { Grid } from '@mui/material';\n\nconst options = [\n    { label: 'Option 1' },\n    { label: 'Option 2' },\n    { label: 'Option 3' },\n];\n\nexport default function MyAutocomplete() {\n    return (\n        <Autocomplete\n            id=\"autocomplete-input\"\n            options={options}\n            getOptionLabel={(option) => option.label}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Search\"\n                    variant=\"outlined\"\n                    fullWidth\n                />\n            )}\n            renderOption={(props, option, state) => (\n                <li {...props}>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs={3}>\n                            <div style={{ background: '#f0f0f0', height: '100%' }}>\n                                {/* Thẻ div chiếm 3 phần */}\n                            </div>\n                        </Grid>\n                        <Grid item xs>\n                            <TextField\n                                fullWidth\n                                value={option.label}\n                                variant=\"outlined\"\n                                size=\"small\"\n                                InputProps={{\n                                    readOnly: true,\n                                    disableUnderline: true,\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </li>\n            )}\n        />\n    );\n}\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,IAAI,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,OAAO,GAAG,CACZ;EAAEC,KAAK,EAAE;AAAW,CAAC,EACrB;EAAEA,KAAK,EAAE;AAAW,CAAC,EACrB;EAAEA,KAAK,EAAE;AAAW,CAAC,CACxB;AAED,eAAe,SAASC,cAAcA,CAAA,EAAG;EACrC,oBACIH,OAAA,CAACJ,YAAY;IACTQ,EAAE,EAAC,oBAAoB;IACvBH,OAAO,EAAEA,OAAQ;IACjBI,cAAc,EAAGC,MAAM,IAAKA,MAAM,CAACJ,KAAM;IACzCK,WAAW,EAAGC,MAAM,iBAChBR,OAAA,CAACH,SAAS;MAAA,GACFW,MAAM;MACVN,KAAK,EAAC,QAAQ;MACdO,OAAO,EAAC,UAAU;MAClBC,SAAS;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CACH;IACFC,YAAY,EAAEA,CAACC,KAAK,EAAEV,MAAM,EAAEW,KAAK,kBAC/BjB,OAAA;MAAA,GAAQgB,KAAK;MAAAE,QAAA,eACTlB,OAAA,CAACF,IAAI;QAACqB,SAAS;QAACC,UAAU,EAAC,QAAQ;QAAAF,QAAA,gBAC/BlB,OAAA,CAACF,IAAI;UAACuB,IAAI;UAACC,EAAE,EAAE,CAAE;UAAAJ,QAAA,eACblB,OAAA;YAAKuB,KAAK,EAAE;cAAEC,UAAU,EAAE,SAAS;cAAEC,MAAM,EAAE;YAAO;UAAE;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEjD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACPd,OAAA,CAACF,IAAI;UAACuB,IAAI;UAACC,EAAE;UAAAJ,QAAA,eACTlB,OAAA,CAACH,SAAS;YACNa,SAAS;YACTgB,KAAK,EAAEpB,MAAM,CAACJ,KAAM;YACpBO,OAAO,EAAC,UAAU;YAClBkB,IAAI,EAAC,OAAO;YACZC,UAAU,EAAE;cACRC,QAAQ,EAAE,IAAI;cACdC,gBAAgB,EAAE;YACtB;UAAE;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAACiB,EAAA,GAvCuB5B,cAAc;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}