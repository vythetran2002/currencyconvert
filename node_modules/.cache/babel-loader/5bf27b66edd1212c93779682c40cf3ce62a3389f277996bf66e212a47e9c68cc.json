{"ast":null,"code":"import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseKeyError, showInvalidLicenseKeyError, showMissingLicenseKeyError, showLicenseKeyPlanMismatchError, showExpiredPackageVersionError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport const sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    const licenseKey = LicenseInfo.getLicenseKey();\n    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const plan = packageName.includes('premium') ? 'Premium' : 'Pro';\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseKey,\n      status: licenseStatus\n    };\n    const fullPackageName = `@mui/${packageName}`;\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.OutOfScope) {\n      showLicenseKeyPlanMismatchError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showMissingLicenseKeyError({\n        plan,\n        packageName: fullPackageName\n      });\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.ExpiredVersion) {\n      showExpiredPackageVersionError({\n        packageName: fullPackageName\n      });\n    }\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}","map":{"version":3,"names":["React","verifyLicense","LicenseInfo","showExpiredLicenseKeyError","showInvalidLicenseKeyError","showMissingLicenseKeyError","showLicenseKeyPlanMismatchError","showExpiredPackageVersionError","LicenseStatus","sharedLicenseStatuses","useLicenseVerifier","packageName","releaseInfo","useMemo","licenseKey","getLicenseKey","key","status","acceptedScopes","includes","plan","licenseStatus","isProduction","process","env","NODE_ENV","fullPackageName","Invalid","OutOfScope","NotFound","Expired","ExpiredVersion"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/@mui/x-license-pro/useLicenseVerifier/useLicenseVerifier.js"],"sourcesContent":["import * as React from 'react';\nimport { verifyLicense } from '../verifyLicense/verifyLicense';\nimport { LicenseInfo } from '../utils/licenseInfo';\nimport { showExpiredLicenseKeyError, showInvalidLicenseKeyError, showMissingLicenseKeyError, showLicenseKeyPlanMismatchError, showExpiredPackageVersionError } from '../utils/licenseErrorMessageUtils';\nimport { LicenseStatus } from '../utils/licenseStatus';\nexport const sharedLicenseStatuses = {};\nexport function useLicenseVerifier(packageName, releaseInfo) {\n  return React.useMemo(() => {\n    const licenseKey = LicenseInfo.getLicenseKey();\n    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {\n      return sharedLicenseStatuses[packageName].status;\n    }\n    const acceptedScopes = packageName.includes('premium') ? ['premium'] : ['pro', 'premium'];\n    const plan = packageName.includes('premium') ? 'Premium' : 'Pro';\n    const licenseStatus = verifyLicense({\n      releaseInfo,\n      licenseKey,\n      acceptedScopes,\n      isProduction: process.env.NODE_ENV === 'production'\n    });\n    sharedLicenseStatuses[packageName] = {\n      key: licenseKey,\n      status: licenseStatus\n    };\n    const fullPackageName = `@mui/${packageName}`;\n    if (licenseStatus === LicenseStatus.Invalid) {\n      showInvalidLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.OutOfScope) {\n      showLicenseKeyPlanMismatchError();\n    } else if (licenseStatus === LicenseStatus.NotFound) {\n      showMissingLicenseKeyError({\n        plan,\n        packageName: fullPackageName\n      });\n    } else if (licenseStatus === LicenseStatus.Expired) {\n      showExpiredLicenseKeyError();\n    } else if (licenseStatus === LicenseStatus.ExpiredVersion) {\n      showExpiredPackageVersionError({\n        packageName: fullPackageName\n      });\n    }\n    return licenseStatus;\n  }, [packageName, releaseInfo]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,0BAA0B,EAAEC,0BAA0B,EAAEC,0BAA0B,EAAEC,+BAA+B,EAAEC,8BAA8B,QAAQ,mCAAmC;AACvM,SAASC,aAAa,QAAQ,wBAAwB;AACtD,OAAO,MAAMC,qBAAqB,GAAG,CAAC,CAAC;AACvC,OAAO,SAASC,kBAAkBA,CAACC,WAAW,EAAEC,WAAW,EAAE;EAC3D,OAAOZ,KAAK,CAACa,OAAO,CAAC,MAAM;IACzB,MAAMC,UAAU,GAAGZ,WAAW,CAACa,aAAa,CAAC,CAAC;IAC9C,IAAIN,qBAAqB,CAACE,WAAW,CAAC,IAAIF,qBAAqB,CAACE,WAAW,CAAC,CAACK,GAAG,KAAKF,UAAU,EAAE;MAC/F,OAAOL,qBAAqB,CAACE,WAAW,CAAC,CAACM,MAAM;IAClD;IACA,MAAMC,cAAc,GAAGP,WAAW,CAACQ,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC;IACzF,MAAMC,IAAI,GAAGT,WAAW,CAACQ,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,KAAK;IAChE,MAAME,aAAa,GAAGpB,aAAa,CAAC;MAClCW,WAAW;MACXE,UAAU;MACVI,cAAc;MACdI,YAAY,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK;IACzC,CAAC,CAAC;IACFhB,qBAAqB,CAACE,WAAW,CAAC,GAAG;MACnCK,GAAG,EAAEF,UAAU;MACfG,MAAM,EAAEI;IACV,CAAC;IACD,MAAMK,eAAe,GAAI,QAAOf,WAAY,EAAC;IAC7C,IAAIU,aAAa,KAAKb,aAAa,CAACmB,OAAO,EAAE;MAC3CvB,0BAA0B,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAIiB,aAAa,KAAKb,aAAa,CAACoB,UAAU,EAAE;MACrDtB,+BAA+B,CAAC,CAAC;IACnC,CAAC,MAAM,IAAIe,aAAa,KAAKb,aAAa,CAACqB,QAAQ,EAAE;MACnDxB,0BAA0B,CAAC;QACzBe,IAAI;QACJT,WAAW,EAAEe;MACf,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIL,aAAa,KAAKb,aAAa,CAACsB,OAAO,EAAE;MAClD3B,0BAA0B,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAIkB,aAAa,KAAKb,aAAa,CAACuB,cAAc,EAAE;MACzDxB,8BAA8B,CAAC;QAC7BI,WAAW,EAAEe;MACf,CAAC,CAAC;IACJ;IACA,OAAOL,aAAa;EACtB,CAAC,EAAE,CAACV,WAAW,EAAEC,WAAW,CAAC,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}