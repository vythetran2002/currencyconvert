{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst fs = require('fs');\nconst url = require('url');\nconst httpUtil = require('../http/util');\nconst io = require('../io');\nconst {\n  exec\n} = require('../io/exec');\nconst {\n  Zip\n} = require('../io/zip');\nconst cmd = require('../lib/command');\nconst input = require('../lib/input');\nconst net = require('../net');\nconst portprober = require('../net/portprober');\nconst logging = require('../lib/logging');\nconst {\n  getJavaPath,\n  formatSpawnArgs\n} = require('./util');\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nlet StdIoOptions; // eslint-disable-line\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nlet CommandLineFlag; // eslint-disable-line\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback;\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname;\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port;\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args;\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path;\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env;\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio;\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nclass DriverService {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  constructor(executable, options) {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.DriverService');\n    /** @private {string} */\n    this.executable_ = executable;\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback;\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname;\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port;\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args;\n\n    /** @private {string} */\n    this.path_ = options.path || '/';\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env;\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore';\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null;\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null;\n  }\n  getExecutable() {\n    return this.executable_;\n  }\n  setExecutable(value) {\n    this.executable_ = value;\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n  address() {\n    if (this.address_) {\n      return this.address_;\n    }\n    throw Error('Server has not been started.');\n  }\n\n  /**\n   * Returns whether the underlying process is still running. This does not take\n   * into account whether the process is in the process of shutting down.\n   * @return {boolean} Whether the underlying service process is running.\n   */\n  isRunning() {\n    return !!this.address_;\n  }\n\n  /**\n   * Starts the server if it is not already running.\n   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n   *     server to start accepting requests. Defaults to 30 seconds.\n   * @return {!Promise<string>} A promise that will resolve to the server's base\n   *     URL when it has started accepting requests. If the timeout expires\n   *     before the server has started, the promise will be rejected.\n   */\n  start(opt_timeoutMs) {\n    if (this.address_) {\n      return this.address_;\n    }\n    const timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;\n    const self = this;\n    let resolveCommand;\n    this.command_ = new Promise(resolve => resolveCommand = resolve);\n    this.address_ = new Promise((resolveAddress, rejectAddress) => {\n      resolveAddress(Promise.resolve(this.port_).then(port => {\n        if (port <= 0) {\n          throw Error('Port must be > 0: ' + port);\n        }\n        return resolveCommandLineFlags(this.args_).then(args => {\n          const command = exec(self.executable_, {\n            args: args,\n            env: self.env_,\n            stdio: self.stdio_\n          });\n          resolveCommand(command);\n          const earlyTermination = command.result().then(function (result) {\n            const error = result.code == null ? Error('Server was killed with ' + result.signal) : Error('Server terminated early with status ' + result.code);\n            rejectAddress(error);\n            self.address_ = null;\n            self.command_ = null;\n            throw error;\n          });\n          let hostname = self.hostname_;\n          if (!hostname) {\n            hostname = !self.loopbackOnly_ && net.getAddress() || net.getLoopbackAddress();\n          }\n          const serverUrl = url.format({\n            protocol: 'http',\n            hostname: hostname,\n            port: port + '',\n            pathname: self.path_\n          });\n          return new Promise((fulfill, reject) => {\n            let cancelToken = earlyTermination.catch(e => reject(Error(e.message)));\n            httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(_ => fulfill(serverUrl), err => {\n              if (err instanceof httpUtil.CancellationError) {\n                fulfill(serverUrl);\n              } else {\n                reject(err);\n              }\n            });\n          });\n        });\n      }));\n    });\n    return this.address_;\n  }\n\n  /**\n   * Stops the service if it is not currently running. This function will kill\n   * the server immediately. To synchronize with the active control flow, use\n   * {@link #stop()}.\n   * @return {!Promise} A promise that will be resolved when the server has been\n   *     stopped.\n   */\n  kill() {\n    if (!this.address_ || !this.command_) {\n      return Promise.resolve(); // Not currently running.\n    }\n\n    let cmd = this.command_;\n    this.address_ = null;\n    this.command_ = null;\n    return cmd.then(c => c.kill('SIGTERM'));\n  }\n}\n\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then( /** !Array<CommandLineFlag> */args => Promise.all(args));\n}\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = class {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  constructor(exe) {\n    /** @private @const {string} */\n    this.exe_ = exe;\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore'\n    };\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  addArguments() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n    this.options_.args = this.options_.args.concat(arguments_);\n    return this;\n  }\n\n  /**\n   * Sets the host name to access the server on. If specified, the\n   * {@linkplain #setLoopback() loopback} setting will be ignored.\n   *\n   * @param {string} hostname\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setHostname(hostname) {\n    this.options_.hostname = hostname;\n    return this;\n  }\n\n  /**\n   * Sets whether the service should be accessed at this host's loopback\n   * address.\n   *\n   * @param {boolean} loopback\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setLoopback(loopback) {\n    this.options_.loopback = loopback;\n    return this;\n  }\n\n  /**\n   * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n   * By default, the driver will accept commands relative to \"/\".\n   *\n   * @param {?string} basePath The base path to use, or `null` to use the\n   *     default.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setPath(basePath) {\n    this.options_.path = basePath;\n    return this;\n  }\n\n  /**\n   * Sets the port to start the server on.\n   *\n   * @param {number} port The port to use, or 0 for any free port.\n   * @return {!DriverService.Builder} A self reference.\n   * @throws {Error} If an invalid port is specified.\n   */\n  setPort(port) {\n    if (port < 0) {\n      throw Error(`port must be >= 0: ${port}`);\n    }\n    this.options_.port = port;\n    return this;\n  }\n\n  /**\n   * Defines the environment to start the server under. This setting will be\n   * inherited by every browser session started by the server. By default, the\n   * server will inherit the enviroment of the current process.\n   *\n   * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n   *     environment to use, or `null` if the server should inherit the\n   *     current environment.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setEnvironment(env) {\n    if (env instanceof Map) {\n      let tmp = {};\n      env.forEach((value, key) => tmp[key] = value);\n      env = tmp;\n    }\n    this.options_.env = env;\n    return this;\n  }\n\n  /**\n   * IO configuration for the spawned server process. For more information,\n   * refer to the documentation of `child_process.spawn`.\n   *\n   * @param {StdIoOptions} config The desired IO configuration.\n   * @return {!DriverService.Builder} A self reference.\n   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n   */\n  setStdio(config) {\n    this.options_.stdio = config;\n    return this;\n  }\n\n  /**\n   * Creates a new DriverService using this instance's current configuration.\n   *\n   * @return {!DriverService} A new driver service.\n   */\n  build() {\n    let port = this.options_.port || portprober.findFreePort();\n    let args = Promise.resolve(port).then(port => {\n      return this.options_.args.concat('--port=' + port);\n    });\n    let options = /** @type {!ServiceOptions} */\n    Object.assign({}, this.options_, {\n      args,\n      port\n    });\n    return new DriverService(this.exe_, options);\n  }\n};\n\n/**\n * Manages the life and death of the\n * <a href=\"https://www.selenium.dev/downloads/\">\n * standalone Selenium server</a>.\n */\nclass SeleniumServer extends DriverService {\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  constructor(jar, opt_options) {\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified');\n    }\n    const options = opt_options || {};\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port);\n    }\n    let port = options.port || portprober.findFreePort();\n    let args = Promise.all([port, options.jvmArgs || [], options.args || []]).then(resolved => {\n      let port = resolved[0];\n      let jvmArgs = resolved[1];\n      let args = resolved[2];\n      const fullArgsList = jvmArgs.concat('-jar', jar, '-port', port).concat(args);\n      return formatSpawnArgs(jar, fullArgsList);\n    });\n    const java = getJavaPath();\n    super(java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio\n    });\n  }\n}\n\n/**\n * A record object describing configuration options for a {@link SeleniumServer}\n * instance.\n *\n * @record\n */\nSeleniumServer.Options = class {\n  constructor() {\n    /**\n     * Whether the server should only be accessible on this host's loopback\n     * address.\n     *\n     * @type {(boolean|undefined)}\n     */\n    this.loopback;\n\n    /**\n     * The port to start the server on (must be > 0). If the port is provided as\n     * a promise, the service will wait for the promise to resolve before\n     * starting.\n     *\n     * @type {(number|!IThenable<number>)}\n     */\n    this.port;\n\n    /**\n     * The arguments to pass to the service. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {!(Array<string>|IThenable<!Array<string>>)}\n     */\n    this.args;\n\n    /**\n     * The arguments to pass to the JVM. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {(!Array<string>|!IThenable<!Array<string>>|undefined)}\n     */\n    this.jvmArgs;\n\n    /**\n     * The environment variables that should be visible to the server\n     * process. Defaults to inheriting the current process's environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env;\n\n    /**\n     * IO configuration for the spawned server process. If unspecified, IO will\n     * be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *         undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio;\n  }\n};\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](https://www.selenium.dev/downloads/).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transferred file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nclass FileDetector extends input.FileDetector {\n  /**\n   * Prepares a `file` for use with the remote browser. If the provided path\n   * does not reference a normal file (i.e. it does not exist or is a\n   * directory), then the promise returned by this method will be resolved with\n   * the original file path. Otherwise, this method will upload the file to the\n   * remote server, which will return the file's path on the remote system so\n   * it may be referenced in subsequent commands.\n   *\n   * @override\n   */\n  handleFile(driver, file) {\n    return io.stat(file).then(function (stats) {\n      if (stats.isDirectory()) {\n        return file; // Not a valid file, return original input.\n      }\n\n      let zip = new Zip();\n      return zip.addFile(file).then(() => zip.toBuffer()).then(buf => buf.toString('base64')).then(encodedZip => {\n        let command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter('file', encodedZip);\n        return driver.execute(command);\n      });\n    }, function (err) {\n      if (err.code === 'ENOENT') {\n        return file; // Not a file; return original input.\n      }\n\n      throw err;\n    });\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  DriverService,\n  FileDetector,\n  SeleniumServer,\n  // Exported for API docs.\n  ServiceOptions\n};","map":{"version":3,"names":["fs","require","url","httpUtil","io","exec","Zip","cmd","input","net","portprober","logging","getJavaPath","formatSpawnArgs","StdIoOptions","CommandLineFlag","ServiceOptions","prototype","loopback","hostname","port","args","path","env","stdio","DriverService","constructor","executable","options","log_","getLogger","executable_","loopbackOnly_","hostname_","port_","args_","path_","env_","process","stdio_","command_","address_","getExecutable","setExecutable","value","address","Error","isRunning","start","opt_timeoutMs","timeout","DEFAULT_START_TIMEOUT_MS","self","resolveCommand","Promise","resolve","resolveAddress","rejectAddress","then","resolveCommandLineFlags","command","earlyTermination","result","error","code","signal","getAddress","getLoopbackAddress","serverUrl","format","protocol","pathname","fulfill","reject","cancelToken","catch","e","message","waitForServer","_","err","CancellationError","kill","c","all","Builder","exe","exe_","options_","addArguments","_len","arguments","length","arguments_","Array","_key","concat","setHostname","setLoopback","setPath","basePath","setPort","setEnvironment","Map","tmp","forEach","key","setStdio","config","build","findFreePort","Object","assign","SeleniumServer","jar","opt_options","jvmArgs","resolved","fullArgsList","java","Options","FileDetector","handleFile","driver","file","stat","stats","isDirectory","zip","addFile","toBuffer","buf","toString","encodedZip","Command","Name","UPLOAD_FILE","setParameter","execute","module","exports"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/selenium-webdriver/remote/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\nconst fs = require('fs')\nconst url = require('url')\n\nconst httpUtil = require('../http/util')\nconst io = require('../io')\nconst { exec } = require('../io/exec')\nconst { Zip } = require('../io/zip')\nconst cmd = require('../lib/command')\nconst input = require('../lib/input')\nconst net = require('../net')\nconst portprober = require('../net/portprober')\nconst logging = require('../lib/logging')\n\nconst { getJavaPath, formatSpawnArgs } = require('./util')\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nlet StdIoOptions // eslint-disable-line\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nlet CommandLineFlag // eslint-disable-line\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nclass DriverService {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  constructor(executable, options) {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.DriverService')\n    /** @private {string} */\n    this.executable_ = executable\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args\n\n    /** @private {string} */\n    this.path_ = options.path || '/'\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore'\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null\n  }\n\n  getExecutable() {\n    return this.executable_\n  }\n\n  setExecutable(value) {\n    this.executable_ = value\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n  address() {\n    if (this.address_) {\n      return this.address_\n    }\n    throw Error('Server has not been started.')\n  }\n\n  /**\n   * Returns whether the underlying process is still running. This does not take\n   * into account whether the process is in the process of shutting down.\n   * @return {boolean} Whether the underlying service process is running.\n   */\n  isRunning() {\n    return !!this.address_\n  }\n\n  /**\n   * Starts the server if it is not already running.\n   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n   *     server to start accepting requests. Defaults to 30 seconds.\n   * @return {!Promise<string>} A promise that will resolve to the server's base\n   *     URL when it has started accepting requests. If the timeout expires\n   *     before the server has started, the promise will be rejected.\n   */\n  start(opt_timeoutMs) {\n    if (this.address_) {\n      return this.address_\n    }\n\n    const timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS\n    const self = this\n\n    let resolveCommand\n    this.command_ = new Promise((resolve) => (resolveCommand = resolve))\n\n    this.address_ = new Promise((resolveAddress, rejectAddress) => {\n      resolveAddress(\n        Promise.resolve(this.port_).then((port) => {\n          if (port <= 0) {\n            throw Error('Port must be > 0: ' + port)\n          }\n\n          return resolveCommandLineFlags(this.args_).then((args) => {\n            const command = exec(self.executable_, {\n              args: args,\n              env: self.env_,\n              stdio: self.stdio_,\n            })\n\n            resolveCommand(command)\n\n            const earlyTermination = command.result().then(function (result) {\n              const error =\n                result.code == null\n                  ? Error('Server was killed with ' + result.signal)\n                  : Error('Server terminated early with status ' + result.code)\n              rejectAddress(error)\n              self.address_ = null\n              self.command_ = null\n              throw error\n            })\n\n            let hostname = self.hostname_\n            if (!hostname) {\n              hostname =\n                (!self.loopbackOnly_ && net.getAddress()) ||\n                net.getLoopbackAddress()\n            }\n\n            const serverUrl = url.format({\n              protocol: 'http',\n              hostname: hostname,\n              port: port + '',\n              pathname: self.path_,\n            })\n\n            return new Promise((fulfill, reject) => {\n              let cancelToken = earlyTermination.catch((e) =>\n                reject(Error(e.message))\n              )\n\n              httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(\n                (_) => fulfill(serverUrl),\n                (err) => {\n                  if (err instanceof httpUtil.CancellationError) {\n                    fulfill(serverUrl)\n                  } else {\n                    reject(err)\n                  }\n                }\n              )\n            })\n          })\n        })\n      )\n    })\n\n    return this.address_\n  }\n\n  /**\n   * Stops the service if it is not currently running. This function will kill\n   * the server immediately. To synchronize with the active control flow, use\n   * {@link #stop()}.\n   * @return {!Promise} A promise that will be resolved when the server has been\n   *     stopped.\n   */\n  kill() {\n    if (!this.address_ || !this.command_) {\n      return Promise.resolve() // Not currently running.\n    }\n    let cmd = this.command_\n    this.address_ = null\n    this.command_ = null\n    return cmd.then((c) => c.kill('SIGTERM'))\n  }\n}\n\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then(\n    /** !Array<CommandLineFlag> */ (args) => Promise.all(args)\n  )\n}\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = class {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  constructor(exe) {\n    /** @private @const {string} */\n    this.exe_ = exe\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore',\n    }\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  addArguments(...arguments_) {\n    this.options_.args = this.options_.args.concat(arguments_)\n    return this\n  }\n\n  /**\n   * Sets the host name to access the server on. If specified, the\n   * {@linkplain #setLoopback() loopback} setting will be ignored.\n   *\n   * @param {string} hostname\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setHostname(hostname) {\n    this.options_.hostname = hostname\n    return this\n  }\n\n  /**\n   * Sets whether the service should be accessed at this host's loopback\n   * address.\n   *\n   * @param {boolean} loopback\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setLoopback(loopback) {\n    this.options_.loopback = loopback\n    return this\n  }\n\n  /**\n   * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n   * By default, the driver will accept commands relative to \"/\".\n   *\n   * @param {?string} basePath The base path to use, or `null` to use the\n   *     default.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setPath(basePath) {\n    this.options_.path = basePath\n    return this\n  }\n\n  /**\n   * Sets the port to start the server on.\n   *\n   * @param {number} port The port to use, or 0 for any free port.\n   * @return {!DriverService.Builder} A self reference.\n   * @throws {Error} If an invalid port is specified.\n   */\n  setPort(port) {\n    if (port < 0) {\n      throw Error(`port must be >= 0: ${port}`)\n    }\n    this.options_.port = port\n    return this\n  }\n\n  /**\n   * Defines the environment to start the server under. This setting will be\n   * inherited by every browser session started by the server. By default, the\n   * server will inherit the enviroment of the current process.\n   *\n   * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n   *     environment to use, or `null` if the server should inherit the\n   *     current environment.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setEnvironment(env) {\n    if (env instanceof Map) {\n      let tmp = {}\n      env.forEach((value, key) => (tmp[key] = value))\n      env = tmp\n    }\n    this.options_.env = env\n    return this\n  }\n\n  /**\n   * IO configuration for the spawned server process. For more information,\n   * refer to the documentation of `child_process.spawn`.\n   *\n   * @param {StdIoOptions} config The desired IO configuration.\n   * @return {!DriverService.Builder} A self reference.\n   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n   */\n  setStdio(config) {\n    this.options_.stdio = config\n    return this\n  }\n\n  /**\n   * Creates a new DriverService using this instance's current configuration.\n   *\n   * @return {!DriverService} A new driver service.\n   */\n  build() {\n    let port = this.options_.port || portprober.findFreePort()\n    let args = Promise.resolve(port).then((port) => {\n      return this.options_.args.concat('--port=' + port)\n    })\n\n    let options =\n      /** @type {!ServiceOptions} */\n      (Object.assign({}, this.options_, { args, port }))\n    return new DriverService(this.exe_, options)\n  }\n}\n\n/**\n * Manages the life and death of the\n * <a href=\"https://www.selenium.dev/downloads/\">\n * standalone Selenium server</a>.\n */\nclass SeleniumServer extends DriverService {\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  constructor(jar, opt_options) {\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified')\n    }\n\n    const options = opt_options || {}\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port)\n    }\n\n    let port = options.port || portprober.findFreePort()\n    let args = Promise.all([\n      port,\n      options.jvmArgs || [],\n      options.args || [],\n    ]).then((resolved) => {\n      let port = resolved[0]\n      let jvmArgs = resolved[1]\n      let args = resolved[2]\n\n      const fullArgsList = jvmArgs\n        .concat('-jar', jar, '-port', port)\n        .concat(args)\n\n      return formatSpawnArgs(jar, fullArgsList)\n    })\n\n    const java = getJavaPath()\n\n    super(java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio,\n    })\n  }\n}\n\n/**\n * A record object describing configuration options for a {@link SeleniumServer}\n * instance.\n *\n * @record\n */\nSeleniumServer.Options = class {\n  constructor() {\n    /**\n     * Whether the server should only be accessible on this host's loopback\n     * address.\n     *\n     * @type {(boolean|undefined)}\n     */\n    this.loopback\n\n    /**\n     * The port to start the server on (must be > 0). If the port is provided as\n     * a promise, the service will wait for the promise to resolve before\n     * starting.\n     *\n     * @type {(number|!IThenable<number>)}\n     */\n    this.port\n\n    /**\n     * The arguments to pass to the service. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {!(Array<string>|IThenable<!Array<string>>)}\n     */\n    this.args\n\n    /**\n     * The arguments to pass to the JVM. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {(!Array<string>|!IThenable<!Array<string>>|undefined)}\n     */\n    this.jvmArgs\n\n    /**\n     * The environment variables that should be visible to the server\n     * process. Defaults to inheriting the current process's environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env\n\n    /**\n     * IO configuration for the spawned server process. If unspecified, IO will\n     * be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *         undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio\n  }\n}\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](https://www.selenium.dev/downloads/).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transferred file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nclass FileDetector extends input.FileDetector {\n  /**\n   * Prepares a `file` for use with the remote browser. If the provided path\n   * does not reference a normal file (i.e. it does not exist or is a\n   * directory), then the promise returned by this method will be resolved with\n   * the original file path. Otherwise, this method will upload the file to the\n   * remote server, which will return the file's path on the remote system so\n   * it may be referenced in subsequent commands.\n   *\n   * @override\n   */\n  handleFile(driver, file) {\n    return io.stat(file).then(\n      function (stats) {\n        if (stats.isDirectory()) {\n          return file // Not a valid file, return original input.\n        }\n\n        let zip = new Zip()\n        return zip\n          .addFile(file)\n          .then(() => zip.toBuffer())\n          .then((buf) => buf.toString('base64'))\n          .then((encodedZip) => {\n            let command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter(\n              'file',\n              encodedZip\n            )\n            return driver.execute(command)\n          })\n      },\n      function (err) {\n        if (err.code === 'ENOENT') {\n          return file // Not a file; return original input.\n        }\n        throw err\n      }\n    )\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  DriverService,\n  FileDetector,\n  SeleniumServer,\n  // Exported for API docs.\n  ServiceOptions,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}