{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  FilterBy\n} = require('./filterBy');\nconst {\n  ConsoleLogEntry,\n  JavascriptLogEntry,\n  GenericLogEntry\n} = require('./logEntries');\nconst LOG = {\n  TYPE_CONSOLE: 'console',\n  TYPE_JS_LOGS: 'javascript'\n};\nclass LogInspector {\n  bidi;\n  ws;\n  constructor(driver, browsingContextIds) {\n    this._driver = driver;\n    this._browsingContextIds = browsingContextIds;\n    this.listener = {};\n  }\n\n  /**\n   * Subscribe to log event\n   * @returns {Promise<void>}\n   */\n  async init() {\n    this.bidi = await this._driver.getBidi();\n    await this.bidi.subscribe('log.entryAdded', this._browsingContextIds);\n  }\n\n  /**\n   * @param kind\n   */\n  logListener(kind) {\n    if (!(kind in this.listener)) {\n      this.listener[kind] = [];\n    }\n  }\n\n  /**\n   * Listen to Console logs\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onConsoleEntry(callback) {\n    let filterBy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (filterBy != undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`);\n    }\n    this.ws = await this.bidi.socket;\n    this.ws.on('message', event => {\n      const {\n        params\n      } = JSON.parse(Buffer.from(event.toString()));\n      if (params?.type === LOG.TYPE_CONSOLE) {\n        let consoleEntry = new ConsoleLogEntry(params.level, params.text, params.timestamp, params.type, params.method, params.realm, params.args, params.stackTrace);\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(consoleEntry);\n          }\n          return;\n        }\n        callback(consoleEntry);\n      }\n    });\n  }\n\n  /**\n   * Listen to JS logs\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onJavascriptLog(callback) {\n    let filterBy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (filterBy != undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`);\n    }\n    this.ws = await this.bidi.socket;\n    this.ws.on('message', event => {\n      const {\n        params\n      } = JSON.parse(Buffer.from(event.toString()));\n      if (params?.type === LOG.TYPE_JS_LOGS) {\n        let jsEntry = new JavascriptLogEntry(params.level, params.text, params.timestamp, params.type, params.stackTrace);\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(jsEntry);\n          }\n          return;\n        }\n        callback(jsEntry);\n      }\n    });\n  }\n\n  /**\n   * Listen to JS Exceptions\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onJavascriptException(callback) {\n    this.ws = await this.bidi.socket;\n    let enabled = LOG.TYPE_JS_EXCEPTION in this.listener || this.logListener(LOG.TYPE_JS_EXCEPTION);\n    this.listener[LOG.TYPE_JS_EXCEPTION].push(callback);\n    if (enabled) {\n      return;\n    }\n    this.ws.on('message', event => {\n      const {\n        params\n      } = JSON.parse(Buffer.from(event.toString()));\n      if (params?.type === 'javascript' && params?.level === 'error') {\n        let jsErrorEntry = new JavascriptLogEntry(params.level, params.text, params.timestamp, params.type, params.stackTrace);\n        this.listener[LOG.TYPE_JS_EXCEPTION].forEach(listener => {\n          listener(jsErrorEntry);\n        });\n      }\n    });\n  }\n\n  /**\n   * Listen to any logs\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onLog(callback) {\n    let filterBy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (filterBy != undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`);\n    }\n    this.ws = await this.bidi.socket;\n    this.ws.on('message', event => {\n      const {\n        params\n      } = JSON.parse(Buffer.from(event.toString()));\n      if (params?.type === 'javascript') {\n        let jsEntry = new JavascriptLogEntry(params.level, params.text, params.timestamp, params.type, params.stackTrace);\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(jsEntry);\n          }\n          return;\n        }\n        callback(jsEntry);\n        return;\n      }\n      if (params?.type === 'console') {\n        let consoleEntry = new ConsoleLogEntry(params.level, params.text, params.timestamp, params.type, params.method, params.realm, params.args, params.stackTrace);\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(consoleEntry);\n          }\n          return;\n        }\n        callback(consoleEntry);\n        return;\n      }\n      if (params != undefined && !['console', 'javascript'].includes(params?.type)) {\n        let genericEntry = new GenericLogEntry(params.level, params.text, params.timestamp, params.type, params.stackTrace);\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(genericEntry);\n          }\n          return;\n        }\n        callback(genericEntry);\n      }\n    });\n  }\n\n  /**\n   * Unsubscribe to log event\n   * @returns {Promise<void>}\n   */\n  async close() {\n    await this.bidi.unsubscribe('log.entryAdded', this._browsingContextIds);\n  }\n}\n\n/**\n * initiate inspector instance and return\n * @param driver\n * @param browsingContextIds\n * @returns {Promise<LogInspector>}\n */\nasync function getLogInspectorInstance(driver, browsingContextIds) {\n  let instance = new LogInspector(driver, browsingContextIds);\n  await instance.init();\n  return instance;\n}\n\n/**\n * API\n * @type {function(*, *): Promise<LogInspector>}\n */\nmodule.exports = getLogInspectorInstance;","map":{"version":3,"names":["FilterBy","require","ConsoleLogEntry","JavascriptLogEntry","GenericLogEntry","LOG","TYPE_CONSOLE","TYPE_JS_LOGS","LogInspector","bidi","ws","constructor","driver","browsingContextIds","_driver","_browsingContextIds","listener","init","getBidi","subscribe","logListener","kind","onConsoleEntry","callback","filterBy","arguments","length","undefined","Error","socket","on","event","params","JSON","parse","Buffer","from","toString","type","consoleEntry","level","text","timestamp","method","realm","args","stackTrace","getLevel","onJavascriptLog","jsEntry","onJavascriptException","enabled","TYPE_JS_EXCEPTION","push","jsErrorEntry","forEach","onLog","includes","genericEntry","close","unsubscribe","getLogInspectorInstance","instance","module","exports"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/selenium-webdriver/bidi/logInspector.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { FilterBy } = require('./filterBy')\nconst { ConsoleLogEntry, JavascriptLogEntry, GenericLogEntry } = require('./logEntries')\n\nconst LOG = {\n  TYPE_CONSOLE : 'console',\n  TYPE_JS_LOGS : 'javascript',\n}\n\nclass LogInspector {\n  bidi\n  ws\n\n  constructor (driver, browsingContextIds) {\n    this._driver = driver\n    this._browsingContextIds = browsingContextIds\n    this.listener = {}\n  }\n\n  /**\n   * Subscribe to log event\n   * @returns {Promise<void>}\n   */\n  async init () {\n    this.bidi = await this._driver.getBidi()\n    await this.bidi.subscribe('log.entryAdded', this._browsingContextIds)\n  }\n\n  /**\n   * @param kind\n   */\n  logListener (kind) {\n    if (!(kind in this.listener)) {\n      this.listener[kind] = []\n    }\n  }\n\n  /**\n   * Listen to Console logs\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onConsoleEntry(callback, filterBy = undefined) {\n    if (filterBy != undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`)\n    }\n\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n\n      if (params?.type === LOG.TYPE_CONSOLE) {\n        let consoleEntry = new ConsoleLogEntry(\n          params.level,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.method,\n          params.realm,\n          params.args,\n          params.stackTrace\n        )\n\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(consoleEntry)\n          }\n          return\n        }\n\n        callback(consoleEntry)\n      }\n    })\n  }\n\n  /**\n   * Listen to JS logs\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onJavascriptLog(callback, filterBy = undefined) {\n    if (filterBy != undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`)\n    }\n\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n\n      if (params?.type === LOG.TYPE_JS_LOGS) {\n        let jsEntry = new JavascriptLogEntry(\n          params.level,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace\n        )\n\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(jsEntry)\n          }\n          return\n        }\n\n        callback(jsEntry)\n      }\n    })\n  }\n\n  /**\n   * Listen to JS Exceptions\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onJavascriptException(callback) {\n    this.ws = await this.bidi.socket\n    let enabled =\n      LOG.TYPE_JS_EXCEPTION in this.listener ||\n      this.logListener(LOG.TYPE_JS_EXCEPTION)\n    this.listener[LOG.TYPE_JS_EXCEPTION].push(callback)\n\n    if (enabled) {\n      return\n    }\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params?.type === 'javascript' && params?.level === 'error') {\n        let jsErrorEntry = new JavascriptLogEntry(\n          params.level,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace\n        )\n\n        this.listener[LOG.TYPE_JS_EXCEPTION].forEach((listener) => {\n          listener(jsErrorEntry)\n        })\n      }\n    })\n  }\n\n  /**\n   * Listen to any logs\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onLog(callback, filterBy = undefined) {\n    if (filterBy != undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`)\n    }\n\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params?.type === 'javascript') {\n        let jsEntry = new JavascriptLogEntry(\n          params.level,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace\n        )\n\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(jsEntry)\n          }\n          return\n        }\n\n        callback(jsEntry)\n        return\n      }\n  \n      if (params?.type === 'console') {\n        let consoleEntry = new ConsoleLogEntry(\n          params.level,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.method,\n          params.realm,\n          params.args,\n          params.stackTrace\n        )\n        \n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(consoleEntry)\n          }\n          return\n        }\n\n        callback(consoleEntry)\n        return\n      }\n\n      if (\n        params != undefined &&\n        !['console', 'javascript'].includes(params?.type)\n      ) {\n        let genericEntry = new GenericLogEntry(\n          params.level,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace\n        )\n\n        if (filterBy != undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(genericEntry)\n          }\n          return\n        }\n\n        callback(genericEntry)\n      }\n    })\n  }\n\n  /**\n   * Unsubscribe to log event\n   * @returns {Promise<void>}\n   */\n  async close () {\n    await this.bidi.unsubscribe('log.entryAdded', this._browsingContextIds)\n  }\n}\n\n/**\n * initiate inspector instance and return\n * @param driver\n * @param browsingContextIds\n * @returns {Promise<LogInspector>}\n */\nasync function getLogInspectorInstance (driver, browsingContextIds) {\n  let instance = new LogInspector(driver, browsingContextIds)\n  await instance.init()\n  return instance\n}\n\n/**\n * API\n * @type {function(*, *): Promise<LogInspector>}\n */\nmodule.exports = getLogInspectorInstance\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}