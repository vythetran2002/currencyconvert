{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  BrowsingContextInfo\n} = require('./browsingContextTypes');\nclass BrowsingContext {\n  constructor(driver) {\n    this._driver = driver;\n  }\n  async init(_ref) {\n    let {\n      browsingContextId,\n      type,\n      referenceContext\n    } = _ref;\n    if (!(await this._driver.getCapabilities()).get('webSocketUrl')) {\n      throw Error('WebDriver instance must support BiDi protocol');\n    }\n    if (type != undefined && !['window', 'tab'].includes(type)) {\n      throw Error(`Valid types are 'window' & 'tab'. Received: ${type}`);\n    }\n    this.bidi = await this._driver.getBidi();\n    this._id = browsingContextId == undefined ? (await this.create(type, referenceContext))['result']['context'] : browsingContextId;\n  }\n\n  /**\n   * Creates a browsing context for the given type and referenceContext\n   */\n  async create(type, referenceContext) {\n    const params = {\n      method: 'browsingContext.create',\n      params: {\n        type: type,\n        referenceContext: referenceContext\n      }\n    };\n    return await this.bidi.send(params);\n  }\n\n  /**\n   * @returns id\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * @param url the url to navigate to\n   * @param readinessState type of readiness state: \"none\" / \"interactive\" / \"complete\"\n   * @returns NavigateResult object\n   */\n  async navigate(url) {\n    let readinessState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    if (readinessState != undefined && !['none', 'interactive', 'complete'].includes(readinessState)) {\n      throw Error(`Valid readiness states are 'none', 'interactive' & 'complete'. Received: ${readinessState}`);\n    }\n    const params = {\n      method: 'browsingContext.navigate',\n      params: {\n        context: this._id,\n        url: url,\n        wait: readinessState\n      }\n    };\n    const navigateResult = (await this.bidi.send(params))['result'];\n    return new NavigateResult(navigateResult['url'], navigateResult['navigation']);\n  }\n\n  /**\n   * @param maxDepth the max depth of the descendents of browsing context tree\n   * @returns BrowsingContextInfo object\n   */\n  async getTree() {\n    let maxDepth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    const params = {\n      method: 'browsingContext.getTree',\n      params: {\n        root: this._id,\n        maxDepth: maxDepth\n      }\n    };\n    let result = await this.bidi.send(params);\n    if ('error' in result) {\n      throw Error(result['error']);\n    }\n    result = result['result']['contexts'][0];\n    return new BrowsingContextInfo(result['context'], result['url'], result['children'], result['parent']);\n  }\n\n  /**\n   * Closes the browing context\n   * @returns {Promise<void>}\n   */\n  async close() {\n    const params = {\n      method: 'browsingContext.close',\n      params: {\n        context: this._id\n      }\n    };\n    await this.bidi.send(params);\n  }\n\n  /**\n   * Prints PDF of the webpage\n   * @param options print options given by the user\n   * @returns PrintResult object\n   */\n  async printPage() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let params = {\n      method: 'browsingContext.print',\n      // Setting default values for parameters\n      params: {\n        context: this._id,\n        background: false,\n        margin: {\n          bottom: 1.0,\n          left: 1.0,\n          right: 1.0,\n          top: 1.0\n        },\n        orientation: 'portrait',\n        page: {\n          height: 27.94,\n          width: 21.59\n        },\n        pageRanges: [],\n        scale: 1.0,\n        shrinkToFit: true\n      }\n    };\n\n    // Updating parameter values based on the options passed\n    params.params = this._driver.validatePrintPageParams(options, params.params);\n    const response = await this.bidi.send(params);\n    return new PrintResult(response.result.data);\n  }\n}\nclass NavigateResult {\n  constructor(url, navigationId) {\n    this._url = url;\n    this._navigationId = navigationId;\n  }\n  get url() {\n    return this._url;\n  }\n  get navigationId() {\n    return this._navigationId;\n  }\n}\nclass PrintResult {\n  constructor(data) {\n    this._data = data;\n  }\n  get data() {\n    return this._data;\n  }\n}\n\n/**\n * initiate browsing context instance and return\n * @param driver\n * @param browsingContextId The browsing context of current window/tab\n * @param type \"window\" or \"tab\"\n * @param referenceContext To get a browsing context for this reference if passed\n * @returns {Promise<BrowsingContext>}\n */\nasync function getBrowsingContextInstance(driver, _ref2) {\n  let {\n    browsingContextId,\n    type,\n    referenceContext\n  } = _ref2;\n  let instance = new BrowsingContext(driver);\n  await instance.init({\n    browsingContextId,\n    type,\n    referenceContext\n  });\n  return instance;\n}\n\n/**\n * API\n * @type {function(*, {*,*,*}): Promise<BrowsingContext>}\n */\nmodule.exports = getBrowsingContextInstance;","map":{"version":3,"names":["BrowsingContextInfo","require","BrowsingContext","constructor","driver","_driver","init","_ref","browsingContextId","type","referenceContext","getCapabilities","get","Error","undefined","includes","bidi","getBidi","_id","create","params","method","send","id","navigate","url","readinessState","arguments","length","context","wait","navigateResult","NavigateResult","getTree","maxDepth","root","result","close","printPage","options","background","margin","bottom","left","right","top","orientation","page","height","width","pageRanges","scale","shrinkToFit","validatePrintPageParams","response","PrintResult","data","navigationId","_url","_navigationId","_data","getBrowsingContextInstance","_ref2","instance","module","exports"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/selenium-webdriver/bidi/browsingContext.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BrowsingContextInfo } = require('./browsingContextTypes')\nclass BrowsingContext {\n  constructor(driver) {\n    this._driver = driver\n  }\n\n  async init({ browsingContextId, type, referenceContext }) {\n    if (!(await this._driver.getCapabilities()).get('webSocketUrl')) {\n      throw Error('WebDriver instance must support BiDi protocol')\n    }\n\n    if (type != undefined && !['window', 'tab'].includes(type)) {\n      throw Error(`Valid types are 'window' & 'tab'. Received: ${type}`)\n    }\n\n    this.bidi = await this._driver.getBidi()\n    this._id =\n      browsingContextId == undefined\n        ? (await this.create(type, referenceContext))['result']['context']\n        : browsingContextId\n  }\n\n  /**\n   * Creates a browsing context for the given type and referenceContext\n   */\n  async create(type, referenceContext) {\n    const params = {\n      method: 'browsingContext.create',\n      params: {\n        type: type,\n        referenceContext: referenceContext,\n      },\n    }\n    return await this.bidi.send(params)\n  }\n\n  /**\n   * @returns id\n   */\n  get id() {\n    return this._id\n  }\n\n  /**\n   * @param url the url to navigate to\n   * @param readinessState type of readiness state: \"none\" / \"interactive\" / \"complete\"\n   * @returns NavigateResult object\n   */\n  async navigate(url, readinessState = undefined) {\n    if (\n      readinessState != undefined &&\n      !['none', 'interactive', 'complete'].includes(readinessState)\n    ) {\n      throw Error(\n        `Valid readiness states are 'none', 'interactive' & 'complete'. Received: ${readinessState}`\n      )\n    }\n\n    const params = {\n      method: 'browsingContext.navigate',\n      params: {\n        context: this._id,\n        url: url,\n        wait: readinessState,\n      },\n    }\n    const navigateResult = (await this.bidi.send(params))['result']\n\n    return new NavigateResult(\n      navigateResult['url'],\n      navigateResult['navigation']\n    )\n  }\n\n  /**\n   * @param maxDepth the max depth of the descendents of browsing context tree\n   * @returns BrowsingContextInfo object\n   */\n  async getTree(maxDepth = undefined) {\n    const params = {\n      method: 'browsingContext.getTree',\n      params: {\n        root: this._id,\n        maxDepth: maxDepth,\n      },\n    }\n\n    let result = await this.bidi.send(params)\n    if ('error' in result) {\n      throw Error(result['error'])\n    }\n\n    result = result['result']['contexts'][0]\n    return new BrowsingContextInfo(\n      result['context'],\n      result['url'],\n      result['children'],\n      result['parent']\n    )\n  }\n\n  /**\n   * Closes the browing context\n   * @returns {Promise<void>}\n   */\n  async close() {\n    const params = {\n      method: 'browsingContext.close',\n      params: {\n        context: this._id,\n      },\n    }\n    await this.bidi.send(params)\n  }\n\n  /**\n   * Prints PDF of the webpage\n   * @param options print options given by the user\n   * @returns PrintResult object\n   */\n  async printPage(options = {}) {\n    let params = {\n      method: 'browsingContext.print',\n      // Setting default values for parameters\n      params: {\n        context: this._id,\n        background: false,\n        margin: {\n          bottom: 1.0,\n          left: 1.0,\n          right: 1.0,\n          top: 1.0,\n        },\n        orientation: 'portrait',\n        page: {\n          height: 27.94,\n          width: 21.59,\n        },\n        pageRanges: [],\n        scale: 1.0,\n        shrinkToFit: true,\n      },\n    }\n\n    // Updating parameter values based on the options passed\n    params.params = this._driver.validatePrintPageParams(options, params.params)\n\n    const response = await this.bidi.send(params)\n    return new PrintResult(response.result.data)\n  }\n}\n\nclass NavigateResult {\n  constructor(url, navigationId) {\n    this._url = url\n    this._navigationId = navigationId\n  }\n\n  get url() {\n    return this._url\n  }\n\n  get navigationId() {\n    return this._navigationId\n  }\n}\n\nclass PrintResult {\n  constructor(data) {\n    this._data = data\n  }\n\n  get data() {\n    return this._data\n  }\n}\n\n/**\n * initiate browsing context instance and return\n * @param driver\n * @param browsingContextId The browsing context of current window/tab\n * @param type \"window\" or \"tab\"\n * @param referenceContext To get a browsing context for this reference if passed\n * @returns {Promise<BrowsingContext>}\n */\nasync function getBrowsingContextInstance(\n  driver,\n  { browsingContextId, type, referenceContext }\n) {\n  let instance = new BrowsingContext(driver)\n  await instance.init({ browsingContextId, type, referenceContext })\n  return instance\n}\n\n/**\n * API\n * @type {function(*, {*,*,*}): Promise<BrowsingContext>}\n */\nmodule.exports = getBrowsingContextInstance\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}