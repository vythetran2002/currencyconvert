{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"timeSteps\", \"autoFocus\", \"components\", \"componentsProps\", \"slots\", \"slotProps\", \"value\", \"disableIgnoringDatePartForTimeValidation\", \"maxTime\", \"minTime\", \"disableFuture\", \"disablePast\", \"minutesStep\", \"shouldDisableClock\", \"shouldDisableTime\", \"onChange\", \"defaultValue\", \"view\", \"views\", \"openTo\", \"onViewChange\", \"focusedView\", \"onFocusedViewChange\", \"className\", \"disabled\", \"readOnly\", \"skipDisabled\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { getMultiSectionDigitalClockUtilityClass } from './multiSectionDigitalClockClasses';\nimport { MultiSectionDigitalClockSection } from './MultiSectionDigitalClockSection';\nimport { getHourSectionOptions, getTimeSectionOptions } from './MultiSectionDigitalClock.utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);\n};\nconst MultiSectionDigitalClockRoot = styled(PickerViewRoot, {\n  name: 'MuiMultiSectionDigitalClock',\n  slot: 'Root',\n  overridesResolver: (_, styles) => styles.root\n})(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`\n  };\n});\nexport const MultiSectionDigitalClock = /*#__PURE__*/React.forwardRef(function MultiSectionDigitalClock(inProps, ref) {\n  const now = useNow();\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMultiSectionDigitalClock'\n  });\n  const {\n      ampm = utils.is12HourCycleInCurrentLocale(),\n      timeSteps: inTimeSteps,\n      autoFocus,\n      components,\n      componentsProps,\n      slots,\n      slotProps,\n      value: valueProp,\n      disableIgnoringDatePartForTimeValidation = false,\n      maxTime,\n      minTime,\n      disableFuture,\n      disablePast,\n      minutesStep = 1,\n      shouldDisableClock,\n      shouldDisableTime,\n      onChange,\n      defaultValue,\n      view: inView,\n      views: inViews = ['hours', 'minutes'],\n      openTo,\n      onViewChange,\n      focusedView: inFocusedView,\n      onFocusedViewChange,\n      className,\n      disabled,\n      readOnly,\n      skipDisabled = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const timeSteps = React.useMemo(() => _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, inTimeSteps), [inTimeSteps]);\n  const [value, setValue] = useControlled({\n    name: 'MultiSectionDigitalClock',\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : null\n  });\n  const handleValueChange = useEventCallback((newValue, selectionState, selectedView) => {\n    setValue(newValue);\n    onChange == null ? void 0 : onChange(newValue, selectionState, selectedView);\n  });\n  const views = React.useMemo(() => {\n    if (!ampm || !inViews.includes('hours')) {\n      return inViews;\n    }\n    return inViews.includes('meridiem') ? inViews : [...inViews, 'meridiem'];\n  }, [ampm, inViews]);\n  const {\n    view,\n    setValueAndGoToView,\n    focusedView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    onChange: handleValueChange,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  });\n  const selectedTimeOrMidnight = React.useMemo(() => value || utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0), [value, now, utils]);\n  const handleMeridiemValueChange = useEventCallback(newValue => {\n    setValueAndGoToView(newValue, null, 'meridiem');\n  });\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(selectedTimeOrMidnight, ampm, handleMeridiemValueChange, 'finish');\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');\n    const containsValidTime = _ref2 => {\n      let {\n        start,\n        end\n      } = _ref2;\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n      if (disableFuture && isAfter(start, now)) {\n        return false;\n      }\n      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {\n        return false;\n      }\n      return true;\n    };\n    const isValidValue = function (timeValue) {\n      let step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (timeValue % step !== 0) {\n        return false;\n      }\n      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {\n        return false;\n      }\n      if (shouldDisableTime) {\n        switch (viewType) {\n          case 'hours':\n            return !shouldDisableTime(utils.setHours(selectedTimeOrMidnight, timeValue), 'hours');\n          case 'minutes':\n            return !shouldDisableTime(utils.setMinutes(selectedTimeOrMidnight, timeValue), 'minutes');\n          case 'seconds':\n            return !shouldDisableTime(utils.setSeconds(selectedTimeOrMidnight, timeValue), 'seconds');\n          default:\n            return false;\n        }\n      }\n      return true;\n    };\n    switch (viewType) {\n      case 'hours':\n        {\n          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          const dateWithNewHours = utils.setHours(selectedTimeOrMidnight, valueWithMeridiem);\n          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(valueWithMeridiem);\n        }\n      case 'minutes':\n        {\n          const dateWithNewMinutes = utils.setMinutes(selectedTimeOrMidnight, rawValue);\n          const start = utils.setSeconds(dateWithNewMinutes, 0);\n          const end = utils.setSeconds(dateWithNewMinutes, 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n      case 'seconds':\n        {\n          const dateWithNewSeconds = utils.setSeconds(selectedTimeOrMidnight, rawValue);\n          const start = dateWithNewSeconds;\n          const end = dateWithNewSeconds;\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue);\n        }\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, selectedTimeOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);\n  const handleSectionChange = useEventCallback((sectionView, newValue) => {\n    const viewIndex = views.indexOf(sectionView);\n    const nextView = views[viewIndex + 1];\n    setValueAndGoToView(newValue, nextView, sectionView);\n  });\n  const buildViewProps = React.useCallback(viewToBuild => {\n    switch (viewToBuild) {\n      case 'hours':\n        {\n          return {\n            onChange: hours => {\n              const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);\n              handleSectionChange('hours', utils.setHours(selectedTimeOrMidnight, valueWithMeridiem));\n            },\n            items: getHourSectionOptions({\n              now,\n              value,\n              ampm,\n              utils,\n              isDisabled: hours => disabled || isTimeDisabled(hours, 'hours'),\n              timeStep: timeSteps.hours,\n              resolveAriaLabel: localeText.hoursClockNumberText\n            })\n          };\n        }\n      case 'minutes':\n        {\n          return {\n            onChange: minutes => {\n              handleSectionChange('minutes', utils.setMinutes(selectedTimeOrMidnight, minutes));\n            },\n            items: getTimeSectionOptions({\n              value: utils.getMinutes(selectedTimeOrMidnight),\n              isDisabled: minutes => disabled || isTimeDisabled(minutes, 'minutes'),\n              resolveLabel: minutes => utils.format(utils.setMinutes(now, minutes), 'minutes'),\n              timeStep: timeSteps.minutes,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.minutesClockNumberText\n            })\n          };\n        }\n      case 'seconds':\n        {\n          return {\n            onChange: seconds => {\n              handleSectionChange('seconds', utils.setSeconds(selectedTimeOrMidnight, seconds));\n            },\n            items: getTimeSectionOptions({\n              value: utils.getSeconds(selectedTimeOrMidnight),\n              isDisabled: seconds => disabled || isTimeDisabled(seconds, 'seconds'),\n              resolveLabel: seconds => utils.format(utils.setSeconds(now, seconds), 'seconds'),\n              timeStep: timeSteps.seconds,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.secondsClockNumberText\n            })\n          };\n        }\n      case 'meridiem':\n        {\n          const amLabel = utils.getMeridiemText('am');\n          const pmLabel = utils.getMeridiemText('pm');\n          return {\n            onChange: handleMeridiemChange,\n            items: [{\n              value: 'am',\n              label: amLabel,\n              isSelected: () => !!value && meridiemMode === 'am',\n              ariaLabel: amLabel\n            }, {\n              value: 'pm',\n              label: pmLabel,\n              isSelected: () => !!value && meridiemMode === 'pm',\n              ariaLabel: pmLabel\n            }]\n          };\n        }\n      default:\n        throw new Error(`Unknown view: ${viewToBuild} found.`);\n    }\n  }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, handleSectionChange, selectedTimeOrMidnight, disabled, isTimeDisabled, handleMeridiemChange]);\n  const viewTimeOptions = React.useMemo(() => {\n    return views.reduce((result, currentView) => {\n      return _extends({}, result, {\n        [currentView]: buildViewProps(currentView)\n      });\n    }, {});\n  }, [views, buildViewProps]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(MultiSectionDigitalClockRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    role: \"group\"\n  }, other, {\n    children: Object.entries(viewTimeOptions).map(_ref3 => {\n      let [timeView, viewOptions] = _ref3;\n      return /*#__PURE__*/_jsx(MultiSectionDigitalClockSection, {\n        items: viewOptions.items,\n        onChange: viewOptions.onChange,\n        active: view === timeView,\n        autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,\n        disabled: disabled,\n        readOnly: readOnly,\n        slots: slots != null ? slots : components,\n        slotProps: slotProps != null ? slotProps : componentsProps,\n        skipDisabled: skipDisabled,\n        \"aria-label\": localeText.selectViewText(timeView)\n      }, timeView);\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSectionDigitalClock.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Overrideable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker views and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value changes.\n   * @template TDate\n   * @param {TDate | null} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired on focused view change.\n   * @template TView\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * If `true`, the picker views and text field are read-only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overrideable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']).isRequired)\n} : void 0;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","clsx","PropTypes","styled","useThemeProps","useEventCallback","composeClasses","useControlled","useUtils","useNow","useLocaleText","convertValueToMeridiem","createIsAfterIgnoreDatePart","useViews","useMeridiemMode","PickerViewRoot","getMultiSectionDigitalClockUtilityClass","MultiSectionDigitalClockSection","getHourSectionOptions","getTimeSectionOptions","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","MultiSectionDigitalClockRoot","name","slot","overridesResolver","_","styles","_ref","theme","display","flexDirection","width","borderBottom","vars","palette","divider","MultiSectionDigitalClock","forwardRef","inProps","ref","now","utils","localeText","props","ampm","is12HourCycleInCurrentLocale","timeSteps","inTimeSteps","autoFocus","components","componentsProps","slotProps","value","valueProp","disableIgnoringDatePartForTimeValidation","maxTime","minTime","disableFuture","disablePast","minutesStep","shouldDisableClock","shouldDisableTime","onChange","defaultValue","view","inView","views","inViews","openTo","onViewChange","focusedView","inFocusedView","onFocusedViewChange","className","disabled","readOnly","skipDisabled","other","useMemo","hours","minutes","seconds","setValue","state","controlled","default","handleValueChange","newValue","selectionState","selectedView","includes","setValueAndGoToView","selectedTimeOrMidnight","setSeconds","setMinutes","setHours","handleMeridiemValueChange","meridiemMode","handleMeridiemChange","isTimeDisabled","useCallback","rawValue","viewType","isAfter","shouldCheckPastEnd","containsValidTime","_ref2","start","end","isValidValue","timeValue","step","arguments","length","undefined","valueWithMeridiem","dateWithNewHours","dateWithNewMinutes","dateWithNewSeconds","Error","handleSectionChange","sectionView","viewIndex","indexOf","nextView","buildViewProps","viewToBuild","items","isDisabled","timeStep","resolveAriaLabel","hoursClockNumberText","getMinutes","resolveLabel","format","hasValue","minutesClockNumberText","getSeconds","secondsClockNumberText","amLabel","getMeridiemText","pmLabel","label","isSelected","ariaLabel","viewTimeOptions","reduce","result","currentView","role","children","Object","entries","map","_ref3","timeView","viewOptions","active","selectViewText","process","env","NODE_ENV","propTypes","bool","object","string","any","oneOf","number","func","sx","oneOfType","arrayOf","shape","isRequired"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ampm\", \"timeSteps\", \"autoFocus\", \"components\", \"componentsProps\", \"slots\", \"slotProps\", \"value\", \"disableIgnoringDatePartForTimeValidation\", \"maxTime\", \"minTime\", \"disableFuture\", \"disablePast\", \"minutesStep\", \"shouldDisableClock\", \"shouldDisableTime\", \"onChange\", \"defaultValue\", \"view\", \"views\", \"openTo\", \"onViewChange\", \"focusedView\", \"onFocusedViewChange\", \"className\", \"disabled\", \"readOnly\", \"skipDisabled\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useControlled from '@mui/utils/useControlled';\nimport { useUtils, useNow, useLocaleText } from '../internals/hooks/useUtils';\nimport { convertValueToMeridiem, createIsAfterIgnoreDatePart } from '../internals/utils/time-utils';\nimport { useViews } from '../internals/hooks/useViews';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { PickerViewRoot } from '../internals/components/PickerViewRoot';\nimport { getMultiSectionDigitalClockUtilityClass } from './multiSectionDigitalClockClasses';\nimport { MultiSectionDigitalClockSection } from './MultiSectionDigitalClockSection';\nimport { getHourSectionOptions, getTimeSectionOptions } from './MultiSectionDigitalClock.utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);\n};\nconst MultiSectionDigitalClockRoot = styled(PickerViewRoot, {\n  name: 'MuiMultiSectionDigitalClock',\n  slot: 'Root',\n  overridesResolver: (_, styles) => styles.root\n})(({\n  theme\n}) => ({\n  display: 'flex',\n  flexDirection: 'row',\n  width: '100%',\n  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`\n}));\nexport const MultiSectionDigitalClock = /*#__PURE__*/React.forwardRef(function MultiSectionDigitalClock(inProps, ref) {\n  const now = useNow();\n  const utils = useUtils();\n  const localeText = useLocaleText();\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMultiSectionDigitalClock'\n  });\n  const {\n      ampm = utils.is12HourCycleInCurrentLocale(),\n      timeSteps: inTimeSteps,\n      autoFocus,\n      components,\n      componentsProps,\n      slots,\n      slotProps,\n      value: valueProp,\n      disableIgnoringDatePartForTimeValidation = false,\n      maxTime,\n      minTime,\n      disableFuture,\n      disablePast,\n      minutesStep = 1,\n      shouldDisableClock,\n      shouldDisableTime,\n      onChange,\n      defaultValue,\n      view: inView,\n      views: inViews = ['hours', 'minutes'],\n      openTo,\n      onViewChange,\n      focusedView: inFocusedView,\n      onFocusedViewChange,\n      className,\n      disabled,\n      readOnly,\n      skipDisabled = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const timeSteps = React.useMemo(() => _extends({\n    hours: 1,\n    minutes: 5,\n    seconds: 5\n  }, inTimeSteps), [inTimeSteps]);\n  const [value, setValue] = useControlled({\n    name: 'MultiSectionDigitalClock',\n    state: 'value',\n    controlled: valueProp,\n    default: defaultValue != null ? defaultValue : null\n  });\n  const handleValueChange = useEventCallback((newValue, selectionState, selectedView) => {\n    setValue(newValue);\n    onChange == null ? void 0 : onChange(newValue, selectionState, selectedView);\n  });\n  const views = React.useMemo(() => {\n    if (!ampm || !inViews.includes('hours')) {\n      return inViews;\n    }\n    return inViews.includes('meridiem') ? inViews : [...inViews, 'meridiem'];\n  }, [ampm, inViews]);\n  const {\n    view,\n    setValueAndGoToView,\n    focusedView\n  } = useViews({\n    view: inView,\n    views,\n    openTo,\n    onViewChange,\n    onChange: handleValueChange,\n    focusedView: inFocusedView,\n    onFocusedViewChange\n  });\n  const selectedTimeOrMidnight = React.useMemo(() => value || utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0), [value, now, utils]);\n  const handleMeridiemValueChange = useEventCallback(newValue => {\n    setValueAndGoToView(newValue, null, 'meridiem');\n  });\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(selectedTimeOrMidnight, ampm, handleMeridiemValueChange, 'finish');\n  const isTimeDisabled = React.useCallback((rawValue, viewType) => {\n    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);\n    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');\n    const containsValidTime = ({\n      start,\n      end\n    }) => {\n      if (minTime && isAfter(minTime, end)) {\n        return false;\n      }\n      if (maxTime && isAfter(start, maxTime)) {\n        return false;\n      }\n      if (disableFuture && isAfter(start, now)) {\n        return false;\n      }\n      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {\n        return false;\n      }\n      return true;\n    };\n    const isValidValue = (timeValue, step = 1) => {\n      if (timeValue % step !== 0) {\n        return false;\n      }\n      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {\n        return false;\n      }\n      if (shouldDisableTime) {\n        switch (viewType) {\n          case 'hours':\n            return !shouldDisableTime(utils.setHours(selectedTimeOrMidnight, timeValue), 'hours');\n          case 'minutes':\n            return !shouldDisableTime(utils.setMinutes(selectedTimeOrMidnight, timeValue), 'minutes');\n          case 'seconds':\n            return !shouldDisableTime(utils.setSeconds(selectedTimeOrMidnight, timeValue), 'seconds');\n          default:\n            return false;\n        }\n      }\n      return true;\n    };\n    switch (viewType) {\n      case 'hours':\n        {\n          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);\n          const dateWithNewHours = utils.setHours(selectedTimeOrMidnight, valueWithMeridiem);\n          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);\n          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(valueWithMeridiem);\n        }\n      case 'minutes':\n        {\n          const dateWithNewMinutes = utils.setMinutes(selectedTimeOrMidnight, rawValue);\n          const start = utils.setSeconds(dateWithNewMinutes, 0);\n          const end = utils.setSeconds(dateWithNewMinutes, 59);\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue, minutesStep);\n        }\n      case 'seconds':\n        {\n          const dateWithNewSeconds = utils.setSeconds(selectedTimeOrMidnight, rawValue);\n          const start = dateWithNewSeconds;\n          const end = dateWithNewSeconds;\n          return !containsValidTime({\n            start,\n            end\n          }) || !isValidValue(rawValue);\n        }\n      default:\n        throw new Error('not supported');\n    }\n  }, [ampm, selectedTimeOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);\n  const handleSectionChange = useEventCallback((sectionView, newValue) => {\n    const viewIndex = views.indexOf(sectionView);\n    const nextView = views[viewIndex + 1];\n    setValueAndGoToView(newValue, nextView, sectionView);\n  });\n  const buildViewProps = React.useCallback(viewToBuild => {\n    switch (viewToBuild) {\n      case 'hours':\n        {\n          return {\n            onChange: hours => {\n              const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);\n              handleSectionChange('hours', utils.setHours(selectedTimeOrMidnight, valueWithMeridiem));\n            },\n            items: getHourSectionOptions({\n              now,\n              value,\n              ampm,\n              utils,\n              isDisabled: hours => disabled || isTimeDisabled(hours, 'hours'),\n              timeStep: timeSteps.hours,\n              resolveAriaLabel: localeText.hoursClockNumberText\n            })\n          };\n        }\n      case 'minutes':\n        {\n          return {\n            onChange: minutes => {\n              handleSectionChange('minutes', utils.setMinutes(selectedTimeOrMidnight, minutes));\n            },\n            items: getTimeSectionOptions({\n              value: utils.getMinutes(selectedTimeOrMidnight),\n              isDisabled: minutes => disabled || isTimeDisabled(minutes, 'minutes'),\n              resolveLabel: minutes => utils.format(utils.setMinutes(now, minutes), 'minutes'),\n              timeStep: timeSteps.minutes,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.minutesClockNumberText\n            })\n          };\n        }\n      case 'seconds':\n        {\n          return {\n            onChange: seconds => {\n              handleSectionChange('seconds', utils.setSeconds(selectedTimeOrMidnight, seconds));\n            },\n            items: getTimeSectionOptions({\n              value: utils.getSeconds(selectedTimeOrMidnight),\n              isDisabled: seconds => disabled || isTimeDisabled(seconds, 'seconds'),\n              resolveLabel: seconds => utils.format(utils.setSeconds(now, seconds), 'seconds'),\n              timeStep: timeSteps.seconds,\n              hasValue: !!value,\n              resolveAriaLabel: localeText.secondsClockNumberText\n            })\n          };\n        }\n      case 'meridiem':\n        {\n          const amLabel = utils.getMeridiemText('am');\n          const pmLabel = utils.getMeridiemText('pm');\n          return {\n            onChange: handleMeridiemChange,\n            items: [{\n              value: 'am',\n              label: amLabel,\n              isSelected: () => !!value && meridiemMode === 'am',\n              ariaLabel: amLabel\n            }, {\n              value: 'pm',\n              label: pmLabel,\n              isSelected: () => !!value && meridiemMode === 'pm',\n              ariaLabel: pmLabel\n            }]\n          };\n        }\n      default:\n        throw new Error(`Unknown view: ${viewToBuild} found.`);\n    }\n  }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, handleSectionChange, selectedTimeOrMidnight, disabled, isTimeDisabled, handleMeridiemChange]);\n  const viewTimeOptions = React.useMemo(() => {\n    return views.reduce((result, currentView) => {\n      return _extends({}, result, {\n        [currentView]: buildViewProps(currentView)\n      });\n    }, {});\n  }, [views, buildViewProps]);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(MultiSectionDigitalClockRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    role: \"group\"\n  }, other, {\n    children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => /*#__PURE__*/_jsx(MultiSectionDigitalClockSection, {\n      items: viewOptions.items,\n      onChange: viewOptions.onChange,\n      active: view === timeView,\n      autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,\n      disabled: disabled,\n      readOnly: readOnly,\n      slots: slots != null ? slots : components,\n      slotProps: slotProps != null ? slotProps : componentsProps,\n      skipDisabled: skipDisabled,\n      \"aria-label\": localeText.selectViewText(timeView)\n    }, timeView))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MultiSectionDigitalClock.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default `utils.is12HourCycleInCurrentLocale()`\n   */\n  ampm: PropTypes.bool,\n  /**\n   * If `true`, the main element is focused during the first mount.\n   * This main element is:\n   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n   * - the `input` element if there is a field rendered.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  /**\n   * Overrideable components.\n   * @default {}\n   * @deprecated Please use `slots`.\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   * @deprecated Please use `slotProps`.\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default selected value.\n   * Used when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * If `true`, the picker views and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\n   * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Controlled focused view.\n   */\n  focusedView: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Maximal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  maxTime: PropTypes.any,\n  /**\n   * Minimal selectable time.\n   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n   */\n  minTime: PropTypes.any,\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n  /**\n   * Callback fired when the value changes.\n   * @template TDate\n   * @param {TDate | null} value The new value.\n   * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n   * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired on focused view change.\n   * @template TView\n   * @param {TView} view The new view to focus or not.\n   * @param {boolean} hasFocus `true` if the view should be focused.\n   */\n  onFocusedViewChange: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @template TView\n   * @param {TView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * The default visible view.\n   * Used when the component view is not controlled.\n   * Must be a valid option from `views` list.\n   */\n  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * If `true`, the picker views and text field are read-only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable specific clock time.\n   * @param {number} clockValue The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   * @deprecated Consider using `shouldDisableTime`.\n   */\n  shouldDisableClock: PropTypes.func,\n  /**\n   * Disable specific time.\n   * @template TDate\n   * @param {TDate} value The value to check.\n   * @param {TimeView} view The clock type of the timeValue.\n   * @returns {boolean} If `true` the time will be disabled.\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\n   * If `true`, disabled digital clock items will not be rendered.\n   * @default false\n   */\n  skipDisabled: PropTypes.bool,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overrideable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The time steps between two time unit options.\n   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n   * @default{ hours: 1, minutes: 5, seconds: 5 }\n   */\n  timeSteps: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number\n  }),\n  /**\n   * The selected value.\n   * Used when the component is controlled.\n   */\n  value: PropTypes.any,\n  /**\n   * The visible view.\n   * Used when the component view is controlled.\n   * Must be a valid option from `views` list.\n   */\n  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),\n  /**\n   * Available views.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']).isRequired)\n} : void 0;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,0CAA0C,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,aAAa,EAAE,qBAAqB,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,CAAC;AAClb,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,MAAM,EAAEC,aAAa,QAAQ,sBAAsB;AAC5D,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,aAAa,MAAM,0BAA0B;AACpD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,aAAa,QAAQ,6BAA6B;AAC7E,SAASC,sBAAsB,EAAEC,2BAA2B,QAAQ,+BAA+B;AACnG,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,eAAe,QAAQ,uCAAuC;AACvE,SAASC,cAAc,QAAQ,wCAAwC;AACvE,SAASC,uCAAuC,QAAQ,mCAAmC;AAC3F,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,qBAAqB,EAAEC,qBAAqB,QAAQ,kCAAkC;AAC/F,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;EACtC,MAAM;IACJC;EACF,CAAC,GAAGD,UAAU;EACd,MAAME,KAAK,GAAG;IACZC,IAAI,EAAE,CAAC,MAAM;EACf,CAAC;EACD,OAAOpB,cAAc,CAACmB,KAAK,EAAET,uCAAuC,EAAEQ,OAAO,CAAC;AAChF,CAAC;AACD,MAAMG,4BAA4B,GAAGxB,MAAM,CAACY,cAAc,EAAE;EAC1Da,IAAI,EAAE,6BAA6B;EACnCC,IAAI,EAAE,MAAM;EACZC,iBAAiB,EAAEA,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACN;AAC3C,CAAC,CAAC,CAACO,IAAA;EAAA,IAAC;IACFC;EACF,CAAC,GAAAD,IAAA;EAAA,OAAM;IACLE,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,KAAK;IACpBC,KAAK,EAAE,MAAM;IACbC,YAAY,EAAG,aAAY,CAACJ,KAAK,CAACK,IAAI,IAAIL,KAAK,EAAEM,OAAO,CAACC,OAAQ;EACnE,CAAC;AAAA,CAAC,CAAC;AACH,OAAO,MAAMC,wBAAwB,GAAG,aAAa1C,KAAK,CAAC2C,UAAU,CAAC,SAASD,wBAAwBA,CAACE,OAAO,EAAEC,GAAG,EAAE;EACpH,MAAMC,GAAG,GAAGrC,MAAM,CAAC,CAAC;EACpB,MAAMsC,KAAK,GAAGvC,QAAQ,CAAC,CAAC;EACxB,MAAMwC,UAAU,GAAGtC,aAAa,CAAC,CAAC;EAClC,MAAMuC,KAAK,GAAG7C,aAAa,CAAC;IAC1B6C,KAAK,EAAEL,OAAO;IACdhB,IAAI,EAAE;EACR,CAAC,CAAC;EACF,MAAM;MACFsB,IAAI,GAAGH,KAAK,CAACI,4BAA4B,CAAC,CAAC;MAC3CC,SAAS,EAAEC,WAAW;MACtBC,SAAS;MACTC,UAAU;MACVC,eAAe;MACf/B,KAAK;MACLgC,SAAS;MACTC,KAAK,EAAEC,SAAS;MAChBC,wCAAwC,GAAG,KAAK;MAChDC,OAAO;MACPC,OAAO;MACPC,aAAa;MACbC,WAAW;MACXC,WAAW,GAAG,CAAC;MACfC,kBAAkB;MAClBC,iBAAiB;MACjBC,QAAQ;MACRC,YAAY;MACZC,IAAI,EAAEC,MAAM;MACZC,KAAK,EAAEC,OAAO,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;MACrCC,MAAM;MACNC,YAAY;MACZC,WAAW,EAAEC,aAAa;MAC1BC,mBAAmB;MACnBC,SAAS;MACTC,QAAQ;MACRC,QAAQ;MACRC,YAAY,GAAG;IACjB,CAAC,GAAGjC,KAAK;IACTkC,KAAK,GAAGrF,6BAA6B,CAACmD,KAAK,EAAElD,SAAS,CAAC;EACzD,MAAMqD,SAAS,GAAGpD,KAAK,CAACoF,OAAO,CAAC,MAAMvF,QAAQ,CAAC;IAC7CwF,KAAK,EAAE,CAAC;IACRC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE;EACX,CAAC,EAAElC,WAAW,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAC/B,MAAM,CAACK,KAAK,EAAE8B,QAAQ,CAAC,GAAGjF,aAAa,CAAC;IACtCqB,IAAI,EAAE,0BAA0B;IAChC6D,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE/B,SAAS;IACrBgC,OAAO,EAAEtB,YAAY,IAAI,IAAI,GAAGA,YAAY,GAAG;EACjD,CAAC,CAAC;EACF,MAAMuB,iBAAiB,GAAGvF,gBAAgB,CAAC,CAACwF,QAAQ,EAAEC,cAAc,EAAEC,YAAY,KAAK;IACrFP,QAAQ,CAACK,QAAQ,CAAC;IAClBzB,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACyB,QAAQ,EAAEC,cAAc,EAAEC,YAAY,CAAC;EAC9E,CAAC,CAAC;EACF,MAAMvB,KAAK,GAAGxE,KAAK,CAACoF,OAAO,CAAC,MAAM;IAChC,IAAI,CAAClC,IAAI,IAAI,CAACuB,OAAO,CAACuB,QAAQ,CAAC,OAAO,CAAC,EAAE;MACvC,OAAOvB,OAAO;IAChB;IACA,OAAOA,OAAO,CAACuB,QAAQ,CAAC,UAAU,CAAC,GAAGvB,OAAO,GAAG,CAAC,GAAGA,OAAO,EAAE,UAAU,CAAC;EAC1E,CAAC,EAAE,CAACvB,IAAI,EAAEuB,OAAO,CAAC,CAAC;EACnB,MAAM;IACJH,IAAI;IACJ2B,mBAAmB;IACnBrB;EACF,CAAC,GAAG/D,QAAQ,CAAC;IACXyD,IAAI,EAAEC,MAAM;IACZC,KAAK;IACLE,MAAM;IACNC,YAAY;IACZP,QAAQ,EAAEwB,iBAAiB;IAC3BhB,WAAW,EAAEC,aAAa;IAC1BC;EACF,CAAC,CAAC;EACF,MAAMoB,sBAAsB,GAAGlG,KAAK,CAACoF,OAAO,CAAC,MAAM1B,KAAK,IAAIX,KAAK,CAACoD,UAAU,CAACpD,KAAK,CAACqD,UAAU,CAACrD,KAAK,CAACsD,QAAQ,CAACvD,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAACY,KAAK,EAAEZ,GAAG,EAAEC,KAAK,CAAC,CAAC;EAClJ,MAAMuD,yBAAyB,GAAGjG,gBAAgB,CAACwF,QAAQ,IAAI;IAC7DI,mBAAmB,CAACJ,QAAQ,EAAE,IAAI,EAAE,UAAU,CAAC;EACjD,CAAC,CAAC;EACF,MAAM;IACJU,YAAY;IACZC;EACF,CAAC,GAAG1F,eAAe,CAACoF,sBAAsB,EAAEhD,IAAI,EAAEoD,yBAAyB,EAAE,QAAQ,CAAC;EACtF,MAAMG,cAAc,GAAGzG,KAAK,CAAC0G,WAAW,CAAC,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC/D,MAAMC,OAAO,GAAGjG,2BAA2B,CAACgD,wCAAwC,EAAEb,KAAK,CAAC;IAC5F,MAAM+D,kBAAkB,GAAGF,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,SAAS,IAAIpC,KAAK,CAACwB,QAAQ,CAAC,SAAS,CAAC;IACtG,MAAMe,iBAAiB,GAAGC,KAAA,IAGpB;MAAA,IAHqB;QACzBC,KAAK;QACLC;MACF,CAAC,GAAAF,KAAA;MACC,IAAIlD,OAAO,IAAI+C,OAAO,CAAC/C,OAAO,EAAEoD,GAAG,CAAC,EAAE;QACpC,OAAO,KAAK;MACd;MACA,IAAIrD,OAAO,IAAIgD,OAAO,CAACI,KAAK,EAAEpD,OAAO,CAAC,EAAE;QACtC,OAAO,KAAK;MACd;MACA,IAAIE,aAAa,IAAI8C,OAAO,CAACI,KAAK,EAAEnE,GAAG,CAAC,EAAE;QACxC,OAAO,KAAK;MACd;MACA,IAAIkB,WAAW,IAAI6C,OAAO,CAAC/D,GAAG,EAAEgE,kBAAkB,GAAGI,GAAG,GAAGD,KAAK,CAAC,EAAE;QACjE,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC;IACD,MAAME,YAAY,GAAG,SAAAA,CAACC,SAAS,EAAe;MAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MACvC,IAAIF,SAAS,GAAGC,IAAI,KAAK,CAAC,EAAE;QAC1B,OAAO,KAAK;MACd;MACA,IAAInD,kBAAkB,IAAI,IAAI,IAAIA,kBAAkB,CAACkD,SAAS,EAAER,QAAQ,CAAC,EAAE;QACzE,OAAO,KAAK;MACd;MACA,IAAIzC,iBAAiB,EAAE;QACrB,QAAQyC,QAAQ;UACd,KAAK,OAAO;YACV,OAAO,CAACzC,iBAAiB,CAACpB,KAAK,CAACsD,QAAQ,CAACH,sBAAsB,EAAEkB,SAAS,CAAC,EAAE,OAAO,CAAC;UACvF,KAAK,SAAS;YACZ,OAAO,CAACjD,iBAAiB,CAACpB,KAAK,CAACqD,UAAU,CAACF,sBAAsB,EAAEkB,SAAS,CAAC,EAAE,SAAS,CAAC;UAC3F,KAAK,SAAS;YACZ,OAAO,CAACjD,iBAAiB,CAACpB,KAAK,CAACoD,UAAU,CAACD,sBAAsB,EAAEkB,SAAS,CAAC,EAAE,SAAS,CAAC;UAC3F;YACE,OAAO,KAAK;QAChB;MACF;MACA,OAAO,IAAI;IACb,CAAC;IACD,QAAQR,QAAQ;MACd,KAAK,OAAO;QACV;UACE,MAAMa,iBAAiB,GAAG9G,sBAAsB,CAACgG,QAAQ,EAAEJ,YAAY,EAAErD,IAAI,CAAC;UAC9E,MAAMwE,gBAAgB,GAAG3E,KAAK,CAACsD,QAAQ,CAACH,sBAAsB,EAAEuB,iBAAiB,CAAC;UAClF,MAAMR,KAAK,GAAGlE,KAAK,CAACoD,UAAU,CAACpD,KAAK,CAACqD,UAAU,CAACsB,gBAAgB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;UACxE,MAAMR,GAAG,GAAGnE,KAAK,CAACoD,UAAU,CAACpD,KAAK,CAACqD,UAAU,CAACsB,gBAAgB,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;UACxE,OAAO,CAACX,iBAAiB,CAAC;YACxBE,KAAK;YACLC;UACF,CAAC,CAAC,IAAI,CAACC,YAAY,CAACM,iBAAiB,CAAC;QACxC;MACF,KAAK,SAAS;QACZ;UACE,MAAME,kBAAkB,GAAG5E,KAAK,CAACqD,UAAU,CAACF,sBAAsB,EAAES,QAAQ,CAAC;UAC7E,MAAMM,KAAK,GAAGlE,KAAK,CAACoD,UAAU,CAACwB,kBAAkB,EAAE,CAAC,CAAC;UACrD,MAAMT,GAAG,GAAGnE,KAAK,CAACoD,UAAU,CAACwB,kBAAkB,EAAE,EAAE,CAAC;UACpD,OAAO,CAACZ,iBAAiB,CAAC;YACxBE,KAAK;YACLC;UACF,CAAC,CAAC,IAAI,CAACC,YAAY,CAACR,QAAQ,EAAE1C,WAAW,CAAC;QAC5C;MACF,KAAK,SAAS;QACZ;UACE,MAAM2D,kBAAkB,GAAG7E,KAAK,CAACoD,UAAU,CAACD,sBAAsB,EAAES,QAAQ,CAAC;UAC7E,MAAMM,KAAK,GAAGW,kBAAkB;UAChC,MAAMV,GAAG,GAAGU,kBAAkB;UAC9B,OAAO,CAACb,iBAAiB,CAAC;YACxBE,KAAK;YACLC;UACF,CAAC,CAAC,IAAI,CAACC,YAAY,CAACR,QAAQ,CAAC;QAC/B;MACF;QACE,MAAM,IAAIkB,KAAK,CAAC,eAAe,CAAC;IACpC;EACF,CAAC,EAAE,CAAC3E,IAAI,EAAEgD,sBAAsB,EAAEtC,wCAAwC,EAAEC,OAAO,EAAE0C,YAAY,EAAEzC,OAAO,EAAEG,WAAW,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEpB,KAAK,EAAEgB,aAAa,EAAEC,WAAW,EAAElB,GAAG,EAAE0B,KAAK,CAAC,CAAC;EAC/M,MAAMsD,mBAAmB,GAAGzH,gBAAgB,CAAC,CAAC0H,WAAW,EAAElC,QAAQ,KAAK;IACtE,MAAMmC,SAAS,GAAGxD,KAAK,CAACyD,OAAO,CAACF,WAAW,CAAC;IAC5C,MAAMG,QAAQ,GAAG1D,KAAK,CAACwD,SAAS,GAAG,CAAC,CAAC;IACrC/B,mBAAmB,CAACJ,QAAQ,EAAEqC,QAAQ,EAAEH,WAAW,CAAC;EACtD,CAAC,CAAC;EACF,MAAMI,cAAc,GAAGnI,KAAK,CAAC0G,WAAW,CAAC0B,WAAW,IAAI;IACtD,QAAQA,WAAW;MACjB,KAAK,OAAO;QACV;UACE,OAAO;YACLhE,QAAQ,EAAEiB,KAAK,IAAI;cACjB,MAAMoC,iBAAiB,GAAG9G,sBAAsB,CAAC0E,KAAK,EAAEkB,YAAY,EAAErD,IAAI,CAAC;cAC3E4E,mBAAmB,CAAC,OAAO,EAAE/E,KAAK,CAACsD,QAAQ,CAACH,sBAAsB,EAAEuB,iBAAiB,CAAC,CAAC;YACzF,CAAC;YACDY,KAAK,EAAEnH,qBAAqB,CAAC;cAC3B4B,GAAG;cACHY,KAAK;cACLR,IAAI;cACJH,KAAK;cACLuF,UAAU,EAAEjD,KAAK,IAAIL,QAAQ,IAAIyB,cAAc,CAACpB,KAAK,EAAE,OAAO,CAAC;cAC/DkD,QAAQ,EAAEnF,SAAS,CAACiC,KAAK;cACzBmD,gBAAgB,EAAExF,UAAU,CAACyF;YAC/B,CAAC;UACH,CAAC;QACH;MACF,KAAK,SAAS;QACZ;UACE,OAAO;YACLrE,QAAQ,EAAEkB,OAAO,IAAI;cACnBwC,mBAAmB,CAAC,SAAS,EAAE/E,KAAK,CAACqD,UAAU,CAACF,sBAAsB,EAAEZ,OAAO,CAAC,CAAC;YACnF,CAAC;YACD+C,KAAK,EAAElH,qBAAqB,CAAC;cAC3BuC,KAAK,EAAEX,KAAK,CAAC2F,UAAU,CAACxC,sBAAsB,CAAC;cAC/CoC,UAAU,EAAEhD,OAAO,IAAIN,QAAQ,IAAIyB,cAAc,CAACnB,OAAO,EAAE,SAAS,CAAC;cACrEqD,YAAY,EAAErD,OAAO,IAAIvC,KAAK,CAAC6F,MAAM,CAAC7F,KAAK,CAACqD,UAAU,CAACtD,GAAG,EAAEwC,OAAO,CAAC,EAAE,SAAS,CAAC;cAChFiD,QAAQ,EAAEnF,SAAS,CAACkC,OAAO;cAC3BuD,QAAQ,EAAE,CAAC,CAACnF,KAAK;cACjB8E,gBAAgB,EAAExF,UAAU,CAAC8F;YAC/B,CAAC;UACH,CAAC;QACH;MACF,KAAK,SAAS;QACZ;UACE,OAAO;YACL1E,QAAQ,EAAEmB,OAAO,IAAI;cACnBuC,mBAAmB,CAAC,SAAS,EAAE/E,KAAK,CAACoD,UAAU,CAACD,sBAAsB,EAAEX,OAAO,CAAC,CAAC;YACnF,CAAC;YACD8C,KAAK,EAAElH,qBAAqB,CAAC;cAC3BuC,KAAK,EAAEX,KAAK,CAACgG,UAAU,CAAC7C,sBAAsB,CAAC;cAC/CoC,UAAU,EAAE/C,OAAO,IAAIP,QAAQ,IAAIyB,cAAc,CAAClB,OAAO,EAAE,SAAS,CAAC;cACrEoD,YAAY,EAAEpD,OAAO,IAAIxC,KAAK,CAAC6F,MAAM,CAAC7F,KAAK,CAACoD,UAAU,CAACrD,GAAG,EAAEyC,OAAO,CAAC,EAAE,SAAS,CAAC;cAChFgD,QAAQ,EAAEnF,SAAS,CAACmC,OAAO;cAC3BsD,QAAQ,EAAE,CAAC,CAACnF,KAAK;cACjB8E,gBAAgB,EAAExF,UAAU,CAACgG;YAC/B,CAAC;UACH,CAAC;QACH;MACF,KAAK,UAAU;QACb;UACE,MAAMC,OAAO,GAAGlG,KAAK,CAACmG,eAAe,CAAC,IAAI,CAAC;UAC3C,MAAMC,OAAO,GAAGpG,KAAK,CAACmG,eAAe,CAAC,IAAI,CAAC;UAC3C,OAAO;YACL9E,QAAQ,EAAEoC,oBAAoB;YAC9B6B,KAAK,EAAE,CAAC;cACN3E,KAAK,EAAE,IAAI;cACX0F,KAAK,EAAEH,OAAO;cACdI,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAC3F,KAAK,IAAI6C,YAAY,KAAK,IAAI;cAClD+C,SAAS,EAAEL;YACb,CAAC,EAAE;cACDvF,KAAK,EAAE,IAAI;cACX0F,KAAK,EAAED,OAAO;cACdE,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAC3F,KAAK,IAAI6C,YAAY,KAAK,IAAI;cAClD+C,SAAS,EAAEH;YACb,CAAC;UACH,CAAC;QACH;MACF;QACE,MAAM,IAAItB,KAAK,CAAE,iBAAgBO,WAAY,SAAQ,CAAC;IAC1D;EACF,CAAC,EAAE,CAACtF,GAAG,EAAEY,KAAK,EAAER,IAAI,EAAEH,KAAK,EAAEK,SAAS,CAACiC,KAAK,EAAEjC,SAAS,CAACkC,OAAO,EAAElC,SAAS,CAACmC,OAAO,EAAEvC,UAAU,CAACyF,oBAAoB,EAAEzF,UAAU,CAAC8F,sBAAsB,EAAE9F,UAAU,CAACgG,sBAAsB,EAAEzC,YAAY,EAAEuB,mBAAmB,EAAE5B,sBAAsB,EAAElB,QAAQ,EAAEyB,cAAc,EAAED,oBAAoB,CAAC,CAAC;EACtS,MAAM+C,eAAe,GAAGvJ,KAAK,CAACoF,OAAO,CAAC,MAAM;IAC1C,OAAOZ,KAAK,CAACgF,MAAM,CAAC,CAACC,MAAM,EAAEC,WAAW,KAAK;MAC3C,OAAO7J,QAAQ,CAAC,CAAC,CAAC,EAAE4J,MAAM,EAAE;QAC1B,CAACC,WAAW,GAAGvB,cAAc,CAACuB,WAAW;MAC3C,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC,EAAE,CAAClF,KAAK,EAAE2D,cAAc,CAAC,CAAC;EAC3B,MAAM5G,UAAU,GAAG0B,KAAK;EACxB,MAAMzB,OAAO,GAAGF,iBAAiB,CAACC,UAAU,CAAC;EAC7C,OAAO,aAAaF,IAAI,CAACM,4BAA4B,EAAE9B,QAAQ,CAAC;IAC9DgD,GAAG,EAAEA,GAAG;IACRkC,SAAS,EAAE9E,IAAI,CAACuB,OAAO,CAACE,IAAI,EAAEqD,SAAS,CAAC;IACxCxD,UAAU,EAAEA,UAAU;IACtBoI,IAAI,EAAE;EACR,CAAC,EAAExE,KAAK,EAAE;IACRyE,QAAQ,EAAEC,MAAM,CAACC,OAAO,CAACP,eAAe,CAAC,CAACQ,GAAG,CAACC,KAAA;MAAA,IAAC,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAAF,KAAA;MAAA,OAAK,aAAa3I,IAAI,CAACJ,+BAA+B,EAAE;QAC5HoH,KAAK,EAAE6B,WAAW,CAAC7B,KAAK;QACxBjE,QAAQ,EAAE8F,WAAW,CAAC9F,QAAQ;QAC9B+F,MAAM,EAAE7F,IAAI,KAAK2F,QAAQ;QACzB3G,SAAS,EAAEA,SAAS,IAAI,IAAI,GAAGA,SAAS,GAAGsB,WAAW,KAAKqF,QAAQ;QACnEjF,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA,QAAQ;QAClBxD,KAAK,EAAEA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG8B,UAAU;QACzCE,SAAS,EAAEA,SAAS,IAAI,IAAI,GAAGA,SAAS,GAAGD,eAAe;QAC1D0B,YAAY,EAAEA,YAAY;QAC1B,YAAY,EAAElC,UAAU,CAACoH,cAAc,CAACH,QAAQ;MAClD,CAAC,EAAEA,QAAQ,CAAC;IAAA;EACd,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACFI,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG7H,wBAAwB,CAAC8H,SAAS,GAAG;EAC3E;EACA;EACA;EACA;EACA;AACF;AACA;AACA;EACEtH,IAAI,EAAEhD,SAAS,CAACuK,IAAI;EACpB;AACF;AACA;AACA;AACA;AACA;EACEnH,SAAS,EAAEpD,SAAS,CAACuK,IAAI;EACzB;AACF;AACA;EACEjJ,OAAO,EAAEtB,SAAS,CAACwK,MAAM;EACzB3F,SAAS,EAAE7E,SAAS,CAACyK,MAAM;EAC3B;AACF;AACA;AACA;AACA;EACEpH,UAAU,EAAErD,SAAS,CAACwK,MAAM;EAC5B;AACF;AACA;AACA;AACA;EACElH,eAAe,EAAEtD,SAAS,CAACwK,MAAM;EACjC;AACF;AACA;AACA;EACErG,YAAY,EAAEnE,SAAS,CAAC0K,GAAG;EAC3B;AACF;AACA;AACA;EACE5F,QAAQ,EAAE9E,SAAS,CAACuK,IAAI;EACxB;AACF;AACA;AACA;EACE1G,aAAa,EAAE7D,SAAS,CAACuK,IAAI;EAC7B;AACF;AACA;AACA;EACE7G,wCAAwC,EAAE1D,SAAS,CAACuK,IAAI;EACxD;AACF;AACA;AACA;EACEzG,WAAW,EAAE9D,SAAS,CAACuK,IAAI;EAC3B;AACF;AACA;EACE7F,WAAW,EAAE1E,SAAS,CAAC2K,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;EACzE;AACF;AACA;AACA;EACEhH,OAAO,EAAE3D,SAAS,CAAC0K,GAAG;EACtB;AACF;AACA;AACA;EACE9G,OAAO,EAAE5D,SAAS,CAAC0K,GAAG;EACtB;AACF;AACA;AACA;EACE3G,WAAW,EAAE/D,SAAS,CAAC4K,MAAM;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;EACE1G,QAAQ,EAAElE,SAAS,CAAC6K,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACEjG,mBAAmB,EAAE5E,SAAS,CAAC6K,IAAI;EACnC;AACF;AACA;AACA;AACA;EACEpG,YAAY,EAAEzE,SAAS,CAAC6K,IAAI;EAC5B;AACF;AACA;AACA;AACA;EACErG,MAAM,EAAExE,SAAS,CAAC2K,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;EACpE;AACF;AACA;AACA;EACE5F,QAAQ,EAAE/E,SAAS,CAACuK,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACEvG,kBAAkB,EAAEhE,SAAS,CAAC6K,IAAI;EAClC;AACF;AACA;AACA;AACA;AACA;AACA;EACE5G,iBAAiB,EAAEjE,SAAS,CAAC6K,IAAI;EACjC;AACF;AACA;AACA;EACE7F,YAAY,EAAEhF,SAAS,CAACuK,IAAI;EAC5B;AACF;AACA;AACA;EACEhH,SAAS,EAAEvD,SAAS,CAACwK,MAAM;EAC3B;AACF;AACA;AACA;EACEjJ,KAAK,EAAEvB,SAAS,CAACwK,MAAM;EACvB;AACF;AACA;EACEM,EAAE,EAAE9K,SAAS,CAAC+K,SAAS,CAAC,CAAC/K,SAAS,CAACgL,OAAO,CAAChL,SAAS,CAAC+K,SAAS,CAAC,CAAC/K,SAAS,CAAC6K,IAAI,EAAE7K,SAAS,CAACwK,MAAM,EAAExK,SAAS,CAACuK,IAAI,CAAC,CAAC,CAAC,EAAEvK,SAAS,CAAC6K,IAAI,EAAE7K,SAAS,CAACwK,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;AACA;AACA;EACEtH,SAAS,EAAElD,SAAS,CAACiL,KAAK,CAAC;IACzB9F,KAAK,EAAEnF,SAAS,CAAC4K,MAAM;IACvBxF,OAAO,EAAEpF,SAAS,CAAC4K,MAAM;IACzBvF,OAAO,EAAErF,SAAS,CAAC4K;EACrB,CAAC,CAAC;EACF;AACF;AACA;AACA;EACEpH,KAAK,EAAExD,SAAS,CAAC0K,GAAG;EACpB;AACF;AACA;AACA;AACA;EACEtG,IAAI,EAAEpE,SAAS,CAAC2K,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;EAClE;AACF;AACA;EACErG,KAAK,EAAEtE,SAAS,CAACgL,OAAO,CAAChL,SAAS,CAAC2K,KAAK,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAACO,UAAU;AAClG,CAAC,GAAG,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}