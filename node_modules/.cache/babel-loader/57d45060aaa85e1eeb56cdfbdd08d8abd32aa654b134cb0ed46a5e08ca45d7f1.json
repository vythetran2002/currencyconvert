{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n'use strict';\n\nconst _http = require('./http');\nconst by = require('./lib/by');\nconst capabilities = require('./lib/capabilities');\nconst chrome = require('./chrome');\nconst edge = require('./edge');\nconst error = require('./lib/error');\nconst firefox = require('./firefox');\nconst ie = require('./ie');\nconst input = require('./lib/input');\nconst logging = require('./lib/logging');\nconst promise = require('./lib/promise');\nconst remote = require('./remote');\nconst safari = require('./safari');\nconst session = require('./lib/session');\nconst until = require('./lib/until');\nconst webdriver = require('./lib/webdriver');\nconst select = require('./lib/select');\nconst LogInspector = require('./bidi/logInspector');\nconst BrowsingContext = require('./bidi/browsingContext');\nconst BrowsingConextInspector = require('./bidi/browsingContextInspector');\nconst ScriptManager = require('./bidi/scriptManager');\nconst Browser = capabilities.Browser;\nconst Capabilities = capabilities.Capabilities;\nconst Capability = capabilities.Capability;\nconst WebDriver = webdriver.WebDriver;\nlet seleniumServer;\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar);\n  }\n  return seleniumServer.start();\n}\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  return class extends ctor {\n    /** @param {input.FileDetector} detector */\n    setFileDetector(detector) {\n      webdriver.WebDriver.prototype.setFileDetector.call(this, detector);\n    }\n  };\n}\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {IThenable<!webdriver.IWebDriver>}\n * @interface\n */\nclass ThenableWebDriver {\n  /** @param {...?} args */\n  static createSession() {} // eslint-disable-line\n}\n\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nconst THENABLE_DRIVERS = new Map();\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor) {\n  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = class extends ctor {\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      constructor(session) {\n        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          rest[_key2 - 1] = arguments[_key2];\n        }\n        super(session, ...rest);\n        const pd = this.getSession().then(session => {\n          return new ctor(session, ...rest);\n        });\n\n        /** @override */\n        this.then = pd.then.bind(pd);\n\n        /** @override */\n        this.catch = pd.catch.bind(pd);\n      }\n    };\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);\n  }\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return thenableWebDriverProxy.createSession(...args);\n}\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"https://www.selenium.dev/downloads/\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nclass Builder {\n  constructor() {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder');\n\n    /** @private {string} */\n    this.url_ = '';\n\n    /** @private {?string} */\n    this.proxy_ = null;\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities();\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null;\n\n    /** @private {chrome.ServiceBuilder} */\n    this.chromeService_ = null;\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null;\n\n    /** @private {firefox.ServiceBuilder} */\n    this.firefoxService_ = null;\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null;\n\n    /** @private {ie.ServiceBuilder} */\n    this.ieService_ = null;\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null;\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null;\n\n    /** @private {remote.DriverService.Builder} */\n    this.edgeService_ = null;\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false;\n\n    /** @private {http.Agent} */\n    this.agent_ = null;\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  disableEnvironmentOverrides() {\n    this.ignoreEnv_ = true;\n    return this;\n  }\n\n  /**\n   * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n   * been specified, the builder direct all new clients to that server. If this\n   * method is never called, the Builder will attempt to create all clients\n   * locally.\n   *\n   * As an alternative to this method, you may also set the\n   * `SELENIUM_REMOTE_URL` environment variable.\n   *\n   * @param {string} url The URL of a remote server to use.\n   * @return {!Builder} A self reference.\n   */\n  usingServer(url) {\n    this.url_ = url;\n    return this;\n  }\n\n  /**\n   * @return {string} The URL of the WebDriver server this instance is\n   *     configured to use.\n   */\n  getServerUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n   * If this method is never called, the Builder will create a connection\n   * without a proxy.\n   *\n   * @param {string} proxy The URL of a proxy to use.\n   * @return {!Builder} A self reference.\n   */\n  usingWebDriverProxy(proxy) {\n    this.proxy_ = proxy;\n    return this;\n  }\n\n  /**\n   * @return {?string} The URL of the proxy server to use for the WebDriver's\n   *    HTTP connections, or `null` if not set.\n   */\n  getWebDriverProxy() {\n    return this.proxy_;\n  }\n\n  /**\n   * Sets the http agent to use for each request.\n   * If this method is not called, the Builder will use http.globalAgent by default.\n   *\n   * @param {http.Agent} agent The agent to use for each request.\n   * @return {!Builder} A self reference.\n   */\n  usingHttpAgent(agent) {\n    this.agent_ = agent;\n    return this;\n  }\n\n  /**\n   * @return {http.Agent} The http agent used for each request\n   */\n  getHttpAgent() {\n    return this.agent_;\n  }\n\n  /**\n   * Recommended way is to use set*Options where * is the browser(eg setChromeOptions)\n   *\n   * Sets the desired capabilities when requesting a new session. This will\n   * overwrite any previously set capabilities.\n   * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n   *     a new session.\n   * @return {!Builder} A self reference.\n   */\n  withCapabilities(capabilities) {\n    this.capabilities_ = new Capabilities(capabilities);\n    return this;\n  }\n\n  /**\n   * Returns the base set of capabilities this instance is currently configured\n   * to use.\n   * @return {!Capabilities} The current capabilities for this builder.\n   */\n  getCapabilities() {\n    return this.capabilities_;\n  }\n\n  /**\n   * Sets the desired capability when requesting a new session.\n   * If there is already a capability named key, its value will be overwritten with value.\n   * This is a convenience wrapper around builder.getCapabilities().set(key, value) to support Builder method chaining.\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Builder} A self reference.\n   */\n  setCapability(key, value) {\n    this.capabilities_.set(key, value);\n    return this;\n  }\n\n  /**\n   * Configures the target browser for clients created by this instance.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * You may also define the target browser using the {@code SELENIUM_BROWSER}\n   * environment variable. If set, this environment variable should be of the\n   * form `browser[:[version][:platform]]`.\n   *\n   * @param {(string|!Browser)} name The name of the target browser;\n   *     common defaults are available on the {@link webdriver.Browser} enum.\n   * @param {string=} opt_version A desired version; may be omitted if any\n   *     version should be used.\n   * @param {(string|!capabilities.Platform)=} opt_platform\n   *     The desired platform; may be omitted if any platform may be used.\n   * @return {!Builder} A self reference.\n   */\n  forBrowser(name, opt_version, opt_platform) {\n    this.capabilities_.setBrowserName(name);\n    if (opt_version) {\n      this.capabilities_.setBrowserVersion(opt_version);\n    }\n    if (opt_platform) {\n      this.capabilities_.setPlatform(opt_platform);\n    }\n    return this;\n  }\n\n  /**\n   * Sets the proxy configuration for the target browser.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * @param {!./lib/proxy.Config} config The configuration to use.\n   * @return {!Builder} A self reference.\n   */\n  setProxy(config) {\n    this.capabilities_.setProxy(config);\n    return this;\n  }\n\n  /**\n   * Sets the logging preferences for the created session. Preferences may be\n   * changed by repeated calls, or by calling {@link #withCapabilities}.\n   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n   *     desired logging preferences.\n   * @return {!Builder} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.capabilities_.setLoggingPrefs(prefs);\n    return this;\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   *\n   * @param {?capabilities.UserPromptHandler} behavior The desired behavior.\n   * @return {!Builder} A self reference.\n   * @see capabilities.Capabilities#setAlertBehavior\n   */\n  setAlertBehavior(behavior) {\n    this.capabilities_.setAlertBehavior(behavior);\n    return this;\n  }\n\n  /**\n   * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!chrome.Options} options The ChromeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeOptions(options) {\n    this.chromeOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {chrome.Options} the Chrome specific options currently configured\n   *     for this builder.\n   */\n  getChromeOptions() {\n    return this.chromeOptions_;\n  }\n\n  /**\n   * Sets the service builder to use for managing the chromedriver child process\n   * when creating new Chrome sessions.\n   *\n   * @param {chrome.ServiceBuilder} service the service to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeService(service) {\n    if (service && !(service instanceof chrome.ServiceBuilder)) {\n      throw TypeError('not a chrome.ServiceBuilder object');\n    }\n    this.chromeService_ = service;\n    return this;\n  }\n\n  /**\n   * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!firefox.Options} options The FirefoxDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setFirefoxOptions(options) {\n    this.firefoxOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {firefox.Options} the Firefox specific options currently configured\n   *     for this instance.\n   */\n  getFirefoxOptions() {\n    return this.firefoxOptions_;\n  }\n\n  /**\n   * Sets the {@link firefox.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating Firefox sessions locally.\n   *\n   * @param {firefox.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setFirefoxService(service) {\n    if (service && !(service instanceof firefox.ServiceBuilder)) {\n      throw TypeError('not a firefox.ServiceBuilder object');\n    }\n    this.firefoxService_ = service;\n    return this;\n  }\n\n  /**\n   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n   * created by this builder. Any proxy settings defined on the given options\n   * will take precedence over those set through {@link #setProxy}.\n   *\n   * @param {!ie.Options} options The IEDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setIeOptions(options) {\n    this.ieOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating IE sessions locally.\n   *\n   * @param {ie.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setIeService(service) {\n    this.ieService_ = service;\n    return this;\n  }\n\n  /**\n   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n   * for drivers created by this builder. Any proxy settings defined on the\n   * given options will take precedence over those set through\n   * {@link #setProxy}.\n   *\n   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setEdgeOptions(options) {\n    this.edgeOptions_ = options;\n    return this;\n  }\n\n  /**\n   * Sets the {@link edge.ServiceBuilder} to use to manage the\n   * MicrosoftEdgeDriver child process when creating sessions locally.\n   *\n   * @param {edge.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setEdgeService(service) {\n    if (service && !(service instanceof edge.ServiceBuilder)) {\n      throw TypeError('not a edge.ServiceBuilder object');\n    }\n    this.edgeService_ = service;\n    return this;\n  }\n\n  /**\n   * Sets Safari specific {@linkplain safari.Options options} for drivers\n   * created by this builder. Any logging settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs}.\n   *\n   * @param {!safari.Options} options The Safari options to use.\n   * @return {!Builder} A self reference.\n   */\n  setSafariOptions(options) {\n    this.safariOptions_ = options;\n    return this;\n  }\n\n  /**\n   * @return {safari.Options} the Safari specific options currently configured\n   *     for this instance.\n   */\n  getSafariOptions() {\n    return this.safariOptions_;\n  }\n\n  /**\n   * Creates a new WebDriver client based on this builder's current\n   * configuration.\n   *\n   * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n   * users to issue commands directly without calling `then()`. The returned\n   * thenable wraps a promise that will resolve to a concrete\n   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n   * rejected if the remote end fails to create a new session.\n   *\n   * @return {!ThenableWebDriver} A new WebDriver instance.\n   * @throws {Error} If the current configuration is invalid.\n   */\n  build() {\n    // Create a copy for any changes we may need to make based on the current\n    // environment.\n    const capabilities = new Capabilities(this.capabilities_);\n    let browser;\n    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`);\n      browser = process.env.SELENIUM_BROWSER.split(/:/, 3);\n      capabilities.setBrowserName(browser[0]);\n      browser[1] && capabilities.setBrowserVersion(browser[1]);\n      browser[2] && capabilities.setPlatform(browser[2]);\n    }\n    browser = capabilities.get(Capability.BROWSER_NAME);\n    if (typeof browser !== 'string') {\n      throw TypeError(`Target browser must be a string, but is <${typeof browser}>;` + ' did you forget to call forBrowser()?');\n    }\n    if (browser === 'ie') {\n      browser = Browser.INTERNET_EXPLORER;\n    }\n\n    // Apply browser specific overrides.\n    if (browser === Browser.CHROME && this.chromeOptions_) {\n      capabilities.merge(this.chromeOptions_);\n    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n      capabilities.merge(this.firefoxOptions_);\n    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n      capabilities.merge(this.ieOptions_);\n    } else if (browser === Browser.SAFARI && this.safariOptions_) {\n      capabilities.merge(this.safariOptions_);\n    } else if (browser === Browser.EDGE && this.edgeOptions_) {\n      capabilities.merge(this.edgeOptions_);\n    }\n    checkOptions(capabilities, 'chromeOptions', chrome.Options, 'setChromeOptions');\n    checkOptions(capabilities, 'moz:firefoxOptions', firefox.Options, 'setFirefoxOptions');\n    checkOptions(capabilities, 'safari.options', safari.Options, 'setSafariOptions');\n\n    // Check for a remote browser.\n    let url = this.url_;\n    if (!this.ignoreEnv_) {\n      if (process.env.SELENIUM_REMOTE_URL) {\n        this.log_.fine(`SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`);\n        url = process.env.SELENIUM_REMOTE_URL;\n      } else if (process.env.SELENIUM_SERVER_JAR) {\n        this.log_.fine(`SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`);\n        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);\n      }\n    }\n    if (url) {\n      this.log_.fine('Creating session on remote server');\n      let client = Promise.resolve(url).then(url => new _http.HttpClient(url, this.agent_, this.proxy_));\n      let executor = new _http.Executor(client);\n      if (browser === Browser.CHROME) {\n        const driver = ensureFileDetectorsAreEnabled(chrome.Driver);\n        return createDriver(driver, capabilities, executor);\n      }\n      if (browser === Browser.FIREFOX) {\n        const driver = ensureFileDetectorsAreEnabled(firefox.Driver);\n        return createDriver(driver, capabilities, executor);\n      }\n      return createDriver(WebDriver, executor, capabilities);\n    }\n\n    // Check for a native browser.\n    switch (browser) {\n      case Browser.CHROME:\n        {\n          let service = null;\n          if (this.chromeService_) {\n            service = this.chromeService_.build();\n          }\n          return createDriver(chrome.Driver, capabilities, service);\n        }\n      case Browser.FIREFOX:\n        {\n          let service = null;\n          if (this.firefoxService_) {\n            service = this.firefoxService_.build();\n          }\n          return createDriver(firefox.Driver, capabilities, service);\n        }\n      case Browser.INTERNET_EXPLORER:\n        {\n          let service = null;\n          if (this.ieService_) {\n            service = this.ieService_.build();\n          }\n          return createDriver(ie.Driver, capabilities, service);\n        }\n      case Browser.EDGE:\n        {\n          let service = null;\n          if (this.edgeService_) {\n            service = this.edgeService_.build();\n          }\n          return createDriver(edge.Driver, capabilities, service);\n        }\n      case Browser.SAFARI:\n        return createDriver(safari.Driver, capabilities);\n      default:\n        throw new Error('Do not know how to build driver: ' + browser + '; did you forget to call usingServer(url)?');\n    }\n  }\n}\n\n/**\n * In the 3.x releases, the various browser option classes\n * (e.g. firefox.Options) had to be manually set as an option using the\n * Capabilties class:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let caps = new Capabilities();\n *     caps.set('moz:firefoxOptions', ffo);\n *\n *     let driver = new Builder()\n *         .withCapabilities(caps)\n *         .build();\n *\n * The options are now subclasses of Capabilities and can be used directly. A\n * direct translation of the above is:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let driver = new Builder()\n *         .withCapabilities(ffo)\n *         .build();\n *\n * You can also set the options for various browsers at once and let the builder\n * choose the correct set at runtime (see Builder docs above):\n *\n *     let ffo = new firefox.Options();\n *     // Configure ...\n *\n *     let co = new chrome.Options();\n *     // Configure ...\n *\n *     let driver = new Builder()\n *         .setChromeOptions(co)\n *         .setFirefoxOptions(ffo)\n *         .build();\n *\n * @param {!Capabilities} caps\n * @param {string} key\n * @param {function(new: Capabilities)} optionType\n * @param {string} setMethod\n * @throws {error.InvalidArgumentError}\n */\nfunction checkOptions(caps, key, optionType, setMethod) {\n  let val = caps.get(key);\n  if (val instanceof optionType) {\n    throw new error.InvalidArgumentError('Options class extends Capabilities and should not be set as key ' + `\"${key}\"; set browser-specific options with ` + `Builder.${setMethod}(). For more information, see the ` + 'documentation attached to the function that threw this error');\n  }\n}\n\n// PUBLIC API\n\nexports.Browser = capabilities.Browser;\nexports.Builder = Builder;\nexports.Button = input.Button;\nexports.By = by.By;\nexports.RelativeBy = by.RelativeBy;\nexports.withTagName = by.withTagName;\nexports.locateWith = by.locateWith;\nexports.Capabilities = capabilities.Capabilities;\nexports.Capability = capabilities.Capability;\nexports.Condition = webdriver.Condition;\nexports.FileDetector = input.FileDetector;\nexports.Key = input.Key;\nexports.Origin = input.Origin;\nexports.Session = session.Session;\nexports.ThenableWebDriver = ThenableWebDriver;\nexports.WebDriver = webdriver.WebDriver;\nexports.WebElement = webdriver.WebElement;\nexports.WebElementCondition = webdriver.WebElementCondition;\nexports.WebElementPromise = webdriver.WebElementPromise;\nexports.error = error;\nexports.logging = logging;\nexports.promise = promise;\nexports.until = until;\nexports.Select = select.Select;\nexports.LogInspector = LogInspector;\nexports.BrowsingContext = BrowsingContext;\nexports.BrowsingConextInspector = BrowsingConextInspector;\nexports.ScriptManager = ScriptManager;","map":{"version":3,"names":["_http","require","by","capabilities","chrome","edge","error","firefox","ie","input","logging","promise","remote","safari","session","until","webdriver","select","LogInspector","BrowsingContext","BrowsingConextInspector","ScriptManager","Browser","Capabilities","Capability","WebDriver","seleniumServer","startSeleniumServer","jar","SeleniumServer","start","ensureFileDetectorsAreEnabled","ctor","setFileDetector","detector","prototype","call","ThenableWebDriver","createSession","THENABLE_DRIVERS","Map","createDriver","thenableWebDriverProxy","get","constructor","_len2","arguments","length","rest","Array","_key2","pd","getSession","then","bind","catch","set","_len","args","_key","Builder","log_","getLogger","url_","proxy_","capabilities_","chromeOptions_","chromeService_","firefoxOptions_","firefoxService_","ieOptions_","ieService_","safariOptions_","edgeOptions_","edgeService_","ignoreEnv_","agent_","disableEnvironmentOverrides","usingServer","url","getServerUrl","usingWebDriverProxy","proxy","getWebDriverProxy","usingHttpAgent","agent","getHttpAgent","withCapabilities","getCapabilities","setCapability","key","value","forBrowser","name","opt_version","opt_platform","setBrowserName","setBrowserVersion","setPlatform","setProxy","config","setLoggingPrefs","prefs","setAlertBehavior","behavior","setChromeOptions","options","getChromeOptions","setChromeService","service","ServiceBuilder","TypeError","setFirefoxOptions","getFirefoxOptions","setFirefoxService","setIeOptions","setIeService","setEdgeOptions","setEdgeService","setSafariOptions","getSafariOptions","build","browser","process","env","SELENIUM_BROWSER","fine","split","BROWSER_NAME","INTERNET_EXPLORER","CHROME","merge","FIREFOX","SAFARI","EDGE","checkOptions","Options","SELENIUM_REMOTE_URL","SELENIUM_SERVER_JAR","client","Promise","resolve","HttpClient","executor","Executor","driver","Driver","Error","caps","optionType","setMethod","val","InvalidArgumentError","exports","Button","By","RelativeBy","withTagName","locateWith","Condition","FileDetector","Key","Origin","Session","WebElement","WebElementCondition","WebElementPromise","Select"],"sources":["/Users/Shared/ATS Git/ATSDemo/ReactJs/ReactCaseStudy/my-app/node_modules/selenium-webdriver/index.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n'use strict'\n\nconst _http = require('./http')\nconst by = require('./lib/by')\nconst capabilities = require('./lib/capabilities')\nconst chrome = require('./chrome')\nconst edge = require('./edge')\nconst error = require('./lib/error')\nconst firefox = require('./firefox')\nconst ie = require('./ie')\nconst input = require('./lib/input')\nconst logging = require('./lib/logging')\nconst promise = require('./lib/promise')\nconst remote = require('./remote')\nconst safari = require('./safari')\nconst session = require('./lib/session')\nconst until = require('./lib/until')\nconst webdriver = require('./lib/webdriver')\nconst select = require('./lib/select')\nconst LogInspector = require('./bidi/logInspector')\nconst BrowsingContext = require('./bidi/browsingContext')\nconst BrowsingConextInspector = require('./bidi/browsingContextInspector')\nconst ScriptManager = require('./bidi/scriptManager')\n\nconst Browser = capabilities.Browser\nconst Capabilities = capabilities.Capabilities\nconst Capability = capabilities.Capability\nconst WebDriver = webdriver.WebDriver\n\nlet seleniumServer\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar)\n  }\n  return seleniumServer.start()\n}\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  return class extends ctor {\n    /** @param {input.FileDetector} detector */\n    setFileDetector(detector) {\n      webdriver.WebDriver.prototype.setFileDetector.call(this, detector)\n    }\n  }\n}\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {IThenable<!webdriver.IWebDriver>}\n * @interface\n */\nclass ThenableWebDriver {\n  /** @param {...?} args */\n  static createSession(...args) {} // eslint-disable-line\n}\n\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nconst THENABLE_DRIVERS = new Map()\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor, ...args) {\n  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor)\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = class extends ctor {\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      constructor(session, ...rest) {\n        super(session, ...rest)\n\n        const pd = this.getSession().then((session) => {\n          return new ctor(session, ...rest)\n        })\n\n        /** @override */\n        this.then = pd.then.bind(pd)\n\n        /** @override */\n        this.catch = pd.catch.bind(pd)\n      }\n    }\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy)\n  }\n  return thenableWebDriverProxy.createSession(...args)\n}\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"https://www.selenium.dev/downloads/\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nclass Builder {\n  constructor() {\n    /** @private @const */\n    this.log_ = logging.getLogger('webdriver.Builder')\n\n    /** @private {string} */\n    this.url_ = ''\n\n    /** @private {?string} */\n    this.proxy_ = null\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities()\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null\n\n    /** @private {chrome.ServiceBuilder} */\n    this.chromeService_ = null\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null\n\n    /** @private {firefox.ServiceBuilder} */\n    this.firefoxService_ = null\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null\n\n    /** @private {ie.ServiceBuilder} */\n    this.ieService_ = null\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null\n\n    /** @private {remote.DriverService.Builder} */\n    this.edgeService_ = null\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false\n\n    /** @private {http.Agent} */\n    this.agent_ = null\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  disableEnvironmentOverrides() {\n    this.ignoreEnv_ = true\n    return this\n  }\n\n  /**\n   * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n   * been specified, the builder direct all new clients to that server. If this\n   * method is never called, the Builder will attempt to create all clients\n   * locally.\n   *\n   * As an alternative to this method, you may also set the\n   * `SELENIUM_REMOTE_URL` environment variable.\n   *\n   * @param {string} url The URL of a remote server to use.\n   * @return {!Builder} A self reference.\n   */\n  usingServer(url) {\n    this.url_ = url\n    return this\n  }\n\n  /**\n   * @return {string} The URL of the WebDriver server this instance is\n   *     configured to use.\n   */\n  getServerUrl() {\n    return this.url_\n  }\n\n  /**\n   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n   * If this method is never called, the Builder will create a connection\n   * without a proxy.\n   *\n   * @param {string} proxy The URL of a proxy to use.\n   * @return {!Builder} A self reference.\n   */\n  usingWebDriverProxy(proxy) {\n    this.proxy_ = proxy\n    return this\n  }\n\n  /**\n   * @return {?string} The URL of the proxy server to use for the WebDriver's\n   *    HTTP connections, or `null` if not set.\n   */\n  getWebDriverProxy() {\n    return this.proxy_\n  }\n\n  /**\n   * Sets the http agent to use for each request.\n   * If this method is not called, the Builder will use http.globalAgent by default.\n   *\n   * @param {http.Agent} agent The agent to use for each request.\n   * @return {!Builder} A self reference.\n   */\n  usingHttpAgent(agent) {\n    this.agent_ = agent\n    return this\n  }\n\n  /**\n   * @return {http.Agent} The http agent used for each request\n   */\n  getHttpAgent() {\n    return this.agent_\n  }\n\n  /**\n   * Recommended way is to use set*Options where * is the browser(eg setChromeOptions)\n   *\n   * Sets the desired capabilities when requesting a new session. This will\n   * overwrite any previously set capabilities.\n   * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n   *     a new session.\n   * @return {!Builder} A self reference.\n   */\n  withCapabilities(capabilities) {\n    this.capabilities_ = new Capabilities(capabilities)\n    return this\n  }\n\n  /**\n   * Returns the base set of capabilities this instance is currently configured\n   * to use.\n   * @return {!Capabilities} The current capabilities for this builder.\n   */\n  getCapabilities() {\n    return this.capabilities_\n  }\n\n  /**\n   * Sets the desired capability when requesting a new session.\n   * If there is already a capability named key, its value will be overwritten with value.\n   * This is a convenience wrapper around builder.getCapabilities().set(key, value) to support Builder method chaining.\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Builder} A self reference.\n   */\n  setCapability(key, value) {\n    this.capabilities_.set(key, value)\n    return this\n  }\n\n  /**\n   * Configures the target browser for clients created by this instance.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * You may also define the target browser using the {@code SELENIUM_BROWSER}\n   * environment variable. If set, this environment variable should be of the\n   * form `browser[:[version][:platform]]`.\n   *\n   * @param {(string|!Browser)} name The name of the target browser;\n   *     common defaults are available on the {@link webdriver.Browser} enum.\n   * @param {string=} opt_version A desired version; may be omitted if any\n   *     version should be used.\n   * @param {(string|!capabilities.Platform)=} opt_platform\n   *     The desired platform; may be omitted if any platform may be used.\n   * @return {!Builder} A self reference.\n   */\n  forBrowser(name, opt_version, opt_platform) {\n    this.capabilities_.setBrowserName(name)\n    if (opt_version) {\n      this.capabilities_.setBrowserVersion(opt_version)\n    }\n    if (opt_platform) {\n      this.capabilities_.setPlatform(opt_platform)\n    }\n    return this\n  }\n\n  /**\n   * Sets the proxy configuration for the target browser.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * @param {!./lib/proxy.Config} config The configuration to use.\n   * @return {!Builder} A self reference.\n   */\n  setProxy(config) {\n    this.capabilities_.setProxy(config)\n    return this\n  }\n\n  /**\n   * Sets the logging preferences for the created session. Preferences may be\n   * changed by repeated calls, or by calling {@link #withCapabilities}.\n   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n   *     desired logging preferences.\n   * @return {!Builder} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.capabilities_.setLoggingPrefs(prefs)\n    return this\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   *\n   * @param {?capabilities.UserPromptHandler} behavior The desired behavior.\n   * @return {!Builder} A self reference.\n   * @see capabilities.Capabilities#setAlertBehavior\n   */\n  setAlertBehavior(behavior) {\n    this.capabilities_.setAlertBehavior(behavior)\n    return this\n  }\n\n  /**\n   * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!chrome.Options} options The ChromeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeOptions(options) {\n    this.chromeOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {chrome.Options} the Chrome specific options currently configured\n   *     for this builder.\n   */\n  getChromeOptions() {\n    return this.chromeOptions_\n  }\n\n  /**\n   * Sets the service builder to use for managing the chromedriver child process\n   * when creating new Chrome sessions.\n   *\n   * @param {chrome.ServiceBuilder} service the service to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeService(service) {\n    if (service && !(service instanceof chrome.ServiceBuilder)) {\n      throw TypeError('not a chrome.ServiceBuilder object')\n    }\n    this.chromeService_ = service\n    return this\n  }\n\n  /**\n   * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!firefox.Options} options The FirefoxDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setFirefoxOptions(options) {\n    this.firefoxOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {firefox.Options} the Firefox specific options currently configured\n   *     for this instance.\n   */\n  getFirefoxOptions() {\n    return this.firefoxOptions_\n  }\n\n  /**\n   * Sets the {@link firefox.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating Firefox sessions locally.\n   *\n   * @param {firefox.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setFirefoxService(service) {\n    if (service && !(service instanceof firefox.ServiceBuilder)) {\n      throw TypeError('not a firefox.ServiceBuilder object')\n    }\n    this.firefoxService_ = service\n    return this\n  }\n\n  /**\n   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n   * created by this builder. Any proxy settings defined on the given options\n   * will take precedence over those set through {@link #setProxy}.\n   *\n   * @param {!ie.Options} options The IEDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setIeOptions(options) {\n    this.ieOptions_ = options\n    return this\n  }\n\n  /**\n   * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating IE sessions locally.\n   *\n   * @param {ie.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setIeService(service) {\n    this.ieService_ = service\n    return this\n  }\n\n  /**\n   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n   * for drivers created by this builder. Any proxy settings defined on the\n   * given options will take precedence over those set through\n   * {@link #setProxy}.\n   *\n   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setEdgeOptions(options) {\n    this.edgeOptions_ = options\n    return this\n  }\n\n  /**\n   * Sets the {@link edge.ServiceBuilder} to use to manage the\n   * MicrosoftEdgeDriver child process when creating sessions locally.\n   *\n   * @param {edge.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setEdgeService(service) {\n    if (service && !(service instanceof edge.ServiceBuilder)) {\n      throw TypeError('not a edge.ServiceBuilder object')\n    }\n    this.edgeService_ = service\n    return this\n  }\n\n  /**\n   * Sets Safari specific {@linkplain safari.Options options} for drivers\n   * created by this builder. Any logging settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs}.\n   *\n   * @param {!safari.Options} options The Safari options to use.\n   * @return {!Builder} A self reference.\n   */\n  setSafariOptions(options) {\n    this.safariOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {safari.Options} the Safari specific options currently configured\n   *     for this instance.\n   */\n  getSafariOptions() {\n    return this.safariOptions_\n  }\n\n  /**\n   * Creates a new WebDriver client based on this builder's current\n   * configuration.\n   *\n   * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n   * users to issue commands directly without calling `then()`. The returned\n   * thenable wraps a promise that will resolve to a concrete\n   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n   * rejected if the remote end fails to create a new session.\n   *\n   * @return {!ThenableWebDriver} A new WebDriver instance.\n   * @throws {Error} If the current configuration is invalid.\n   */\n  build() {\n    // Create a copy for any changes we may need to make based on the current\n    // environment.\n    const capabilities = new Capabilities(this.capabilities_)\n\n    let browser\n    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`)\n      browser = process.env.SELENIUM_BROWSER.split(/:/, 3)\n      capabilities.setBrowserName(browser[0])\n\n      browser[1] && capabilities.setBrowserVersion(browser[1])\n      browser[2] && capabilities.setPlatform(browser[2])\n    }\n\n    browser = capabilities.get(Capability.BROWSER_NAME)\n\n    if (typeof browser !== 'string') {\n      throw TypeError(\n        `Target browser must be a string, but is <${typeof browser}>;` +\n          ' did you forget to call forBrowser()?'\n      )\n    }\n\n    if (browser === 'ie') {\n      browser = Browser.INTERNET_EXPLORER\n    }\n\n    // Apply browser specific overrides.\n    if (browser === Browser.CHROME && this.chromeOptions_) {\n      capabilities.merge(this.chromeOptions_)\n    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n      capabilities.merge(this.firefoxOptions_)\n    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n      capabilities.merge(this.ieOptions_)\n    } else if (browser === Browser.SAFARI && this.safariOptions_) {\n      capabilities.merge(this.safariOptions_)\n    } else if (browser === Browser.EDGE && this.edgeOptions_) {\n      capabilities.merge(this.edgeOptions_)\n    }\n\n    checkOptions(\n      capabilities,\n      'chromeOptions',\n      chrome.Options,\n      'setChromeOptions'\n    )\n    checkOptions(\n      capabilities,\n      'moz:firefoxOptions',\n      firefox.Options,\n      'setFirefoxOptions'\n    )\n    checkOptions(\n      capabilities,\n      'safari.options',\n      safari.Options,\n      'setSafariOptions'\n    )\n\n    // Check for a remote browser.\n    let url = this.url_\n    if (!this.ignoreEnv_) {\n      if (process.env.SELENIUM_REMOTE_URL) {\n        this.log_.fine(`SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`)\n        url = process.env.SELENIUM_REMOTE_URL\n      } else if (process.env.SELENIUM_SERVER_JAR) {\n        this.log_.fine(`SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`)\n        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR)\n      }\n    }\n\n    if (url) {\n      this.log_.fine('Creating session on remote server')\n      let client = Promise.resolve(url).then(\n        (url) => new _http.HttpClient(url, this.agent_, this.proxy_)\n      )\n      let executor = new _http.Executor(client)\n\n      if (browser === Browser.CHROME) {\n        const driver = ensureFileDetectorsAreEnabled(chrome.Driver)\n        return createDriver(driver, capabilities, executor)\n      }\n\n      if (browser === Browser.FIREFOX) {\n        const driver = ensureFileDetectorsAreEnabled(firefox.Driver)\n        return createDriver(driver, capabilities, executor)\n      }\n      return createDriver(WebDriver, executor, capabilities)\n    }\n\n    // Check for a native browser.\n    switch (browser) {\n      case Browser.CHROME: {\n        let service = null\n        if (this.chromeService_) {\n          service = this.chromeService_.build()\n        }\n        return createDriver(chrome.Driver, capabilities, service)\n      }\n\n      case Browser.FIREFOX: {\n        let service = null\n        if (this.firefoxService_) {\n          service = this.firefoxService_.build()\n        }\n        return createDriver(firefox.Driver, capabilities, service)\n      }\n\n      case Browser.INTERNET_EXPLORER: {\n        let service = null\n        if (this.ieService_) {\n          service = this.ieService_.build()\n        }\n        return createDriver(ie.Driver, capabilities, service)\n      }\n\n      case Browser.EDGE: {\n        let service = null\n        if (this.edgeService_) {\n          service = this.edgeService_.build()\n        }\n        return createDriver(edge.Driver, capabilities, service)\n      }\n\n      case Browser.SAFARI:\n        return createDriver(safari.Driver, capabilities)\n\n      default:\n        throw new Error(\n          'Do not know how to build driver: ' +\n            browser +\n            '; did you forget to call usingServer(url)?'\n        )\n    }\n  }\n}\n\n/**\n * In the 3.x releases, the various browser option classes\n * (e.g. firefox.Options) had to be manually set as an option using the\n * Capabilties class:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let caps = new Capabilities();\n *     caps.set('moz:firefoxOptions', ffo);\n *\n *     let driver = new Builder()\n *         .withCapabilities(caps)\n *         .build();\n *\n * The options are now subclasses of Capabilities and can be used directly. A\n * direct translation of the above is:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let driver = new Builder()\n *         .withCapabilities(ffo)\n *         .build();\n *\n * You can also set the options for various browsers at once and let the builder\n * choose the correct set at runtime (see Builder docs above):\n *\n *     let ffo = new firefox.Options();\n *     // Configure ...\n *\n *     let co = new chrome.Options();\n *     // Configure ...\n *\n *     let driver = new Builder()\n *         .setChromeOptions(co)\n *         .setFirefoxOptions(ffo)\n *         .build();\n *\n * @param {!Capabilities} caps\n * @param {string} key\n * @param {function(new: Capabilities)} optionType\n * @param {string} setMethod\n * @throws {error.InvalidArgumentError}\n */\nfunction checkOptions(caps, key, optionType, setMethod) {\n  let val = caps.get(key)\n  if (val instanceof optionType) {\n    throw new error.InvalidArgumentError(\n      'Options class extends Capabilities and should not be set as key ' +\n        `\"${key}\"; set browser-specific options with ` +\n        `Builder.${setMethod}(). For more information, see the ` +\n        'documentation attached to the function that threw this error'\n    )\n  }\n}\n\n// PUBLIC API\n\nexports.Browser = capabilities.Browser\nexports.Builder = Builder\nexports.Button = input.Button\nexports.By = by.By\nexports.RelativeBy = by.RelativeBy\nexports.withTagName = by.withTagName\nexports.locateWith = by.locateWith\nexports.Capabilities = capabilities.Capabilities\nexports.Capability = capabilities.Capability\nexports.Condition = webdriver.Condition\nexports.FileDetector = input.FileDetector\nexports.Key = input.Key\nexports.Origin = input.Origin\nexports.Session = session.Session\nexports.ThenableWebDriver = ThenableWebDriver\nexports.WebDriver = webdriver.WebDriver\nexports.WebElement = webdriver.WebElement\nexports.WebElementCondition = webdriver.WebElementCondition\nexports.WebElementPromise = webdriver.WebElementPromise\nexports.error = error\nexports.logging = logging\nexports.promise = promise\nexports.until = until\nexports.Select = select.Select\nexports.LogInspector = LogInspector\nexports.BrowsingContext = BrowsingContext\nexports.BrowsingConextInspector = BrowsingConextInspector\nexports.ScriptManager = ScriptManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}